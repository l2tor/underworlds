// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: underworlds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "underworlds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace underworlds {

namespace {

const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* Size_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Size_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pointf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pointf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientInteraction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientInteraction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientInteraction_InteractionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Context_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Context_reflection_ = NULL;
const ::google::protobuf::Descriptor* Topology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Topology_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Node_NodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Nodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInvalidation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInvalidation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeInvalidation_NodeInvalidationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Situation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Situation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Situation_SituationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SituationInContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SituationInContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimelineInvalidation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimelineInvalidation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TimelineInvalidation_TimelineInvalidationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Mesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeshInContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeshInContext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_underworlds_2eproto() {
  protobuf_AddDesc_underworlds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "underworlds.proto");
  GOOGLE_CHECK(file != NULL);
  Empty_descriptor_ = file->message_type(0);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::default_instance_,
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _is_default_instance_));
  Bool_descriptor_ = file->message_type(1);
  static const int Bool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, value_),
  };
  Bool_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Bool_descriptor_,
      Bool::default_instance_,
      Bool_offsets_,
      -1,
      -1,
      -1,
      sizeof(Bool),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, _is_default_instance_));
  Time_descriptor_ = file->message_type(2);
  static const int Time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, time_),
  };
  Time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      -1,
      -1,
      -1,
      sizeof(Time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _is_default_instance_));
  Name_descriptor_ = file->message_type(3);
  static const int Name_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, name_),
  };
  Name_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Name_descriptor_,
      Name::default_instance_,
      Name_offsets_,
      -1,
      -1,
      -1,
      sizeof(Name),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, _is_default_instance_));
  Size_descriptor_ = file->message_type(4);
  static const int Size_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, size_),
  };
  Size_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Size_descriptor_,
      Size::default_instance_,
      Size_offsets_,
      -1,
      -1,
      -1,
      sizeof(Size),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, _is_default_instance_));
  Pointf_descriptor_ = file->message_type(5);
  static const int Pointf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pointf, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pointf, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pointf, z_),
  };
  Pointf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pointf_descriptor_,
      Pointf::default_instance_,
      Pointf_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pointf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pointf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pointf, _is_default_instance_));
  Point_descriptor_ = file->message_type(6);
  static const int Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _is_default_instance_));
  Color_descriptor_ = file->message_type(7);
  static const int Color_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, a_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      -1,
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _is_default_instance_));
  Client_descriptor_ = file->message_type(8);
  static const int Client_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, links_),
  };
  Client_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Client_descriptor_,
      Client::default_instance_,
      Client_offsets_,
      -1,
      -1,
      -1,
      sizeof(Client),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, _is_default_instance_));
  ClientInteraction_descriptor_ = file->message_type(9);
  static const int ClientInteraction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInteraction, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInteraction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInteraction, last_activity_),
  };
  ClientInteraction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientInteraction_descriptor_,
      ClientInteraction::default_instance_,
      ClientInteraction_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientInteraction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInteraction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInteraction, _is_default_instance_));
  ClientInteraction_InteractionType_descriptor_ = ClientInteraction_descriptor_->enum_type(0);
  Context_descriptor_ = file->message_type(10);
  static const int Context_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, world_),
  };
  Context_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Context_descriptor_,
      Context::default_instance_,
      Context_offsets_,
      -1,
      -1,
      -1,
      sizeof(Context),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _is_default_instance_));
  Topology_descriptor_ = file->message_type(11);
  static const int Topology_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, worlds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, clients_),
  };
  Topology_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Topology_descriptor_,
      Topology::default_instance_,
      Topology_offsets_,
      -1,
      -1,
      -1,
      sizeof(Topology),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _is_default_instance_));
  Node_descriptor_ = file->message_type(12);
  static const int Node_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, transformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, last_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, lowres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, hires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, cad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, aabb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, physics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, clipplanenear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, clipplanefar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, aspect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, horizontalfov_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  Node_NodeType_descriptor_ = Node_descriptor_->enum_type(0);
  Nodes_descriptor_ = file->message_type(13);
  static const int Nodes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, ids_),
  };
  Nodes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Nodes_descriptor_,
      Nodes::default_instance_,
      Nodes_offsets_,
      -1,
      -1,
      -1,
      sizeof(Nodes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, _is_default_instance_));
  NodeInContext_descriptor_ = file->message_type(14);
  static const int NodeInContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInContext, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInContext, node_),
  };
  NodeInContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeInContext_descriptor_,
      NodeInContext::default_instance_,
      NodeInContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeInContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInContext, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInContext, _is_default_instance_));
  NodeInvalidation_descriptor_ = file->message_type(15);
  static const int NodeInvalidation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInvalidation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInvalidation, id_),
  };
  NodeInvalidation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeInvalidation_descriptor_,
      NodeInvalidation::default_instance_,
      NodeInvalidation_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeInvalidation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInvalidation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInvalidation, _is_default_instance_));
  NodeInvalidation_NodeInvalidationType_descriptor_ = NodeInvalidation_descriptor_->enum_type(0);
  Situation_descriptor_ = file->message_type(16);
  static const int Situation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Situation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Situation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Situation, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Situation, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Situation, end_),
  };
  Situation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Situation_descriptor_,
      Situation::default_instance_,
      Situation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Situation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Situation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Situation, _is_default_instance_));
  Situation_SituationType_descriptor_ = Situation_descriptor_->enum_type(0);
  SituationInContext_descriptor_ = file->message_type(17);
  static const int SituationInContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SituationInContext, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SituationInContext, situation_),
  };
  SituationInContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SituationInContext_descriptor_,
      SituationInContext::default_instance_,
      SituationInContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(SituationInContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SituationInContext, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SituationInContext, _is_default_instance_));
  TimelineInvalidation_descriptor_ = file->message_type(18);
  static const int TimelineInvalidation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimelineInvalidation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimelineInvalidation, id_),
  };
  TimelineInvalidation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimelineInvalidation_descriptor_,
      TimelineInvalidation::default_instance_,
      TimelineInvalidation_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimelineInvalidation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimelineInvalidation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimelineInvalidation, _is_default_instance_));
  TimelineInvalidation_TimelineInvalidationType_descriptor_ = TimelineInvalidation_descriptor_->enum_type(0);
  Mesh_descriptor_ = file->message_type(19);
  static const int Mesh_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, normals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, colors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, diffuse_),
  };
  Mesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mesh_descriptor_,
      Mesh::default_instance_,
      Mesh_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _is_default_instance_));
  MeshInContext_descriptor_ = file->message_type(20);
  static const int MeshInContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshInContext, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshInContext, mesh_),
  };
  MeshInContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MeshInContext_descriptor_,
      MeshInContext::default_instance_,
      MeshInContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(MeshInContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshInContext, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeshInContext, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_underworlds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, &Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Bool_descriptor_, &Bool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Name_descriptor_, &Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Size_descriptor_, &Size::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pointf_descriptor_, &Pointf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Client_descriptor_, &Client::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientInteraction_descriptor_, &ClientInteraction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Context_descriptor_, &Context::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Topology_descriptor_, &Topology::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Nodes_descriptor_, &Nodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeInContext_descriptor_, &NodeInContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeInvalidation_descriptor_, &NodeInvalidation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Situation_descriptor_, &Situation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SituationInContext_descriptor_, &SituationInContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimelineInvalidation_descriptor_, &TimelineInvalidation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mesh_descriptor_, &Mesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MeshInContext_descriptor_, &MeshInContext::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_underworlds_2eproto() {
  delete Empty::default_instance_;
  delete Empty_reflection_;
  delete Bool::default_instance_;
  delete Bool_reflection_;
  delete Time::default_instance_;
  delete Time_reflection_;
  delete Name::default_instance_;
  delete Name_reflection_;
  delete Size::default_instance_;
  delete Size_reflection_;
  delete Pointf::default_instance_;
  delete Pointf_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Color::default_instance_;
  delete Color_reflection_;
  delete Client::default_instance_;
  delete Client_reflection_;
  delete ClientInteraction::default_instance_;
  delete ClientInteraction_reflection_;
  delete Context::default_instance_;
  delete Context_reflection_;
  delete Topology::default_instance_;
  delete Topology_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Nodes::default_instance_;
  delete Nodes_reflection_;
  delete NodeInContext::default_instance_;
  delete NodeInContext_reflection_;
  delete NodeInvalidation::default_instance_;
  delete NodeInvalidation_reflection_;
  delete Situation::default_instance_;
  delete Situation_reflection_;
  delete SituationInContext::default_instance_;
  delete SituationInContext_reflection_;
  delete TimelineInvalidation::default_instance_;
  delete TimelineInvalidation_reflection_;
  delete Mesh::default_instance_;
  delete Mesh_reflection_;
  delete MeshInContext::default_instance_;
  delete MeshInContext_reflection_;
}

void protobuf_AddDesc_underworlds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021underworlds.proto\022\013underworlds\"\007\n\005Empt"
    "y\"\025\n\004Bool\022\r\n\005value\030\001 \001(\010\"\024\n\004Time\022\014\n\004time"
    "\030\001 \001(\001\"\024\n\004Name\022\014\n\004name\030\001 \001(\t\"\024\n\004Size\022\014\n\004"
    "size\030\001 \001(\005\")\n\006Pointf\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
    "(\002\022\t\n\001z\030\003 \001(\002\"(\n\005Point\022\t\n\001x\030\001 \001(\021\022\t\n\001y\030\002"
    " \001(\021\022\t\n\001z\030\003 \001(\021\"3\n\005Color\022\t\n\001r\030\001 \001(\002\022\t\n\001g"
    "\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001a\030\004 \001(\002\"Q\n\006Client\022\n"
    "\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022-\n\005links\030\003 \003(\0132"
    "\036.underworlds.ClientInteraction\"\320\001\n\021Clie"
    "ntInteraction\022\r\n\005world\030\001 \001(\t\022<\n\004type\030\002 \001"
    "(\0162..underworlds.ClientInteraction.Inter"
    "actionType\022(\n\rlast_activity\030\003 \001(\0132\021.unde"
    "rworlds.Time\"D\n\017InteractionType\022\n\n\006READE"
    "R\020\000\022\014\n\010PROVIDER\020\001\022\013\n\007MONITOR\020\002\022\n\n\006FILTER"
    "\020\003\"(\n\007Context\022\016\n\006client\030\001 \001(\t\022\r\n\005world\030\002"
    " \001(\t\"@\n\010Topology\022\016\n\006worlds\030\001 \003(\t\022$\n\007clie"
    "nts\030\002 \003(\0132\023.underworlds.Client\"\212\003\n\004Node\022"
    "\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022(\n\004type\030\003 \001(\0162"
    "\032.underworlds.Node.NodeType\022\016\n\006parent\030\004 "
    "\001(\t\022\020\n\010children\030\005 \003(\t\022\026\n\016transformation\030"
    "\006 \003(\002\022\023\n\013last_update\030\010 \001(\001\022\016\n\006lowres\030\020 \003"
    "(\t\022\r\n\005hires\030\021 \003(\t\022\013\n\003cad\030\022 \003(\t\022!\n\004aabb\030\023"
    " \003(\0132\023.underworlds.Pointf\022\017\n\007physics\030\036 \001"
    "(\010\022\025\n\rclipplanenear\030( \001(\002\022\024\n\014clipplanefa"
    "r\030) \001(\002\022\016\n\006aspect\030* \001(\002\022\025\n\rhorizontalfov"
    "\030+ \001(\002\";\n\010NodeType\022\r\n\tUNDEFINED\020\000\022\n\n\006ENT"
    "ITY\020\001\022\010\n\004MESH\020\002\022\n\n\006CAMERA\020\003\"\024\n\005Nodes\022\013\n\003"
    "ids\030\001 \003(\t\"W\n\rNodeInContext\022%\n\007context\030\001 "
    "\001(\0132\024.underworlds.Context\022\037\n\004node\030\002 \001(\0132"
    "\021.underworlds.Node\"\231\001\n\020NodeInvalidation\022"
    "@\n\004type\030\001 \001(\01622.underworlds.NodeInvalida"
    "tion.NodeInvalidationType\022\n\n\002id\030\002 \001(\t\"7\n"
    "\024NodeInvalidationType\022\007\n\003NEW\020\000\022\n\n\006UPDATE"
    "\020\001\022\n\n\006DELETE\020\002\"\337\001\n\tSituation\022\n\n\002id\030\001 \001(\t"
    "\0222\n\004type\030\002 \001(\0162$.underworlds.Situation.S"
    "ituationType\022\023\n\013description\030\003 \001(\t\022 \n\005sta"
    "rt\030\004 \001(\0132\021.underworlds.Time\022\036\n\003end\030\005 \001(\013"
    "2\021.underworlds.Time\";\n\rSituationType\022\013\n\007"
    "GENERIC\020\000\022\n\n\006MOTION\020\001\022\021\n\rEVT_MODELLOAD\020\002"
    "\"f\n\022SituationInContext\022%\n\007context\030\001 \001(\0132"
    "\024.underworlds.Context\022)\n\tsituation\030\002 \001(\013"
    "2\026.underworlds.Situation\"\247\001\n\024TimelineInv"
    "alidation\022H\n\004type\030\001 \001(\0162:.underworlds.Ti"
    "melineInvalidation.TimelineInvalidationT"
    "ype\022\n\n\002id\030\002 \001(\t\"9\n\030TimelineInvalidationT"
    "ype\022\t\n\005EVENT\020\000\022\t\n\005START\020\001\022\007\n\003END\020\002\"\267\001\n\004M"
    "esh\022\n\n\002id\030\001 \001(\t\022%\n\010vertices\030\002 \003(\0132\023.unde"
    "rworlds.Pointf\022!\n\005faces\030\003 \003(\0132\022.underwor"
    "lds.Point\022$\n\007normals\030\004 \003(\0132\023.underworlds"
    ".Pointf\022\016\n\006colors\030\005 \003(\r\022#\n\007diffuse\030\006 \001(\013"
    "2\022.underworlds.Color\"U\n\rMeshInContext\022#\n"
    "\006client\030\001 \001(\0132\023.underworlds.Client\022\037\n\004me"
    "sh\030\002 \001(\0132\021.underworlds.Mesh2\205\t\n\013Underwor"
    "lds\0220\n\004helo\022\021.underworlds.Name\032\023.underwo"
    "rlds.Client\"\000\0222\n\006uptime\022\023.underworlds.Cl"
    "ient\032\021.underworlds.Time\"\000\0228\n\010topology\022\023."
    "underworlds.Client\032\025.underworlds.Topolog"
    "y\"\000\0228\n\013getNodesLen\022\024.underworlds.Context"
    "\032\021.underworlds.Size\"\000\0229\n\013getNodesIds\022\024.u"
    "nderworlds.Context\032\022.underworlds.Nodes\"\000"
    "\0228\n\013getRootNode\022\024.underworlds.Context\032\021."
    "underworlds.Node\"\000\022:\n\007getNode\022\032.underwor"
    "lds.NodeInContext\032\021.underworlds.Node\"\000\022>"
    "\n\nupdateNode\022\032.underworlds.NodeInContext"
    "\032\022.underworlds.Empty\"\000\022>\n\ndeleteNode\022\032.u"
    "nderworlds.NodeInContext\032\022.underworlds.E"
    "mpty\"\000\022O\n\024getNodeInvalidations\022\024.underwo"
    "rlds.Context\032\035.underworlds.NodeInvalidat"
    "ion\"\0000\001\022;\n\016timelineOrigin\022\024.underworlds."
    "Context\032\021.underworlds.Time\"\000\022>\n\005event\022\037."
    "underworlds.SituationInContext\032\022.underwo"
    "rlds.Empty\"\000\022G\n\016startSituation\022\037.underwo"
    "rlds.SituationInContext\032\022.underworlds.Em"
    "pty\"\000\022E\n\014endSituation\022\037.underworlds.Situ"
    "ationInContext\032\022.underworlds.Empty\"\000\022W\n\030"
    "getTimelineInvalidations\022\024.underworlds.C"
    "ontext\032!.underworlds.TimelineInvalidatio"
    "n\"\0000\001\022:\n\007hasMesh\022\032.underworlds.MeshInCon"
    "text\032\021.underworlds.Bool\"\000\022:\n\007getMesh\022\032.u"
    "nderworlds.MeshInContext\032\021.underworlds.M"
    "esh\"\000\022<\n\010pushMesh\022\032.underworlds.MeshInCo"
    "ntext\032\022.underworlds.Empty\"\000b\006proto3", 3275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "underworlds.proto", &protobuf_RegisterTypes);
  Empty::default_instance_ = new Empty();
  Bool::default_instance_ = new Bool();
  Time::default_instance_ = new Time();
  Name::default_instance_ = new Name();
  Size::default_instance_ = new Size();
  Pointf::default_instance_ = new Pointf();
  Point::default_instance_ = new Point();
  Color::default_instance_ = new Color();
  Client::default_instance_ = new Client();
  ClientInteraction::default_instance_ = new ClientInteraction();
  Context::default_instance_ = new Context();
  Topology::default_instance_ = new Topology();
  Node::default_instance_ = new Node();
  Nodes::default_instance_ = new Nodes();
  NodeInContext::default_instance_ = new NodeInContext();
  NodeInvalidation::default_instance_ = new NodeInvalidation();
  Situation::default_instance_ = new Situation();
  SituationInContext::default_instance_ = new SituationInContext();
  TimelineInvalidation::default_instance_ = new TimelineInvalidation();
  Mesh::default_instance_ = new Mesh();
  MeshInContext::default_instance_ = new MeshInContext();
  Empty::default_instance_->InitAsDefaultInstance();
  Bool::default_instance_->InitAsDefaultInstance();
  Time::default_instance_->InitAsDefaultInstance();
  Name::default_instance_->InitAsDefaultInstance();
  Size::default_instance_->InitAsDefaultInstance();
  Pointf::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  Client::default_instance_->InitAsDefaultInstance();
  ClientInteraction::default_instance_->InitAsDefaultInstance();
  Context::default_instance_->InitAsDefaultInstance();
  Topology::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  Nodes::default_instance_->InitAsDefaultInstance();
  NodeInContext::default_instance_->InitAsDefaultInstance();
  NodeInvalidation::default_instance_->InitAsDefaultInstance();
  Situation::default_instance_->InitAsDefaultInstance();
  SituationInContext::default_instance_->InitAsDefaultInstance();
  TimelineInvalidation::default_instance_->InitAsDefaultInstance();
  Mesh::default_instance_->InitAsDefaultInstance();
  MeshInContext::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_underworlds_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_underworlds_2eproto {
  StaticDescriptorInitializer_underworlds_2eproto() {
    protobuf_AddDesc_underworlds_2eproto();
  }
} static_descriptor_initializer_underworlds_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Empty)
}

void Empty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Empty)
}

void Empty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:underworlds.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Empty* Empty::default_instance_ = NULL;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Empty)
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Empty)
  // @@protoc_insertion_point(serialize_end:underworlds.Empty)
}

::google::protobuf::uint8* Empty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Empty)
  return target;
}

int Empty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Empty)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Empty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bool::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bool::Bool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Bool)
}

void Bool::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Bool::Bool(const Bool& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Bool)
}

void Bool::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = false;
}

Bool::~Bool() {
  // @@protoc_insertion_point(destructor:underworlds.Bool)
  SharedDtor();
}

void Bool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bool_descriptor_;
}

const Bool& Bool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Bool* Bool::default_instance_ = NULL;

Bool* Bool::New(::google::protobuf::Arena* arena) const {
  Bool* n = new Bool;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bool::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Bool)
  value_ = false;
}

bool Bool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Bool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Bool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Bool)
  return false;
#undef DO_
}

void Bool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Bool)
  // optional bool value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Bool)
}

::google::protobuf::uint8* Bool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Bool)
  // optional bool value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Bool)
  return target;
}

int Bool::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Bool)
  int total_size = 0;

  // optional bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Bool)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Bool* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Bool>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Bool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Bool)
    MergeFrom(*source);
  }
}

void Bool::MergeFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Bool)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Bool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bool::CopyFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bool::IsInitialized() const {

  return true;
}

void Bool::Swap(Bool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bool::InternalSwap(Bool* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bool_descriptor_;
  metadata.reflection = Bool_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bool

// optional bool value = 1;
void Bool::clear_value() {
  value_ = false;
}
 bool Bool::value() const {
  // @@protoc_insertion_point(field_get:underworlds.Bool.value)
  return value_;
}
 void Bool::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Bool.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Time)
}

void Time::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Time::Time(const Time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Time)
}

void Time::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = 0;
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:underworlds.Time)
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Time)
  time_ = 0;
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Time)
  // optional double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Time)
}

::google::protobuf::uint8* Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Time)
  // optional double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Time)
  return target;
}

int Time::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Time)
  int total_size = 0;

  // optional double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Time* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {

  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Time

// optional double time = 1;
void Time::clear_time() {
  time_ = 0;
}
 double Time::time() const {
  // @@protoc_insertion_point(field_get:underworlds.Time.time)
  return time_;
}
 void Time::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Time.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Name::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Name::Name()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Name)
}

void Name::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Name::Name(const Name& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Name)
}

void Name::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:underworlds.Name)
  SharedDtor();
}

void Name::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Name_descriptor_;
}

const Name& Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Name* Name::default_instance_ = NULL;

Name* Name::New(::google::protobuf::Arena* arena) const {
  Name* n = new Name;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Name)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Name.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Name)
  return false;
#undef DO_
}

void Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Name)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Name.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Name)
}

::google::protobuf::uint8* Name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Name)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Name.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Name)
  return target;
}

int Name::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Name)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Name::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Name)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Name* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Name>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Name)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Name)
    MergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Name)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Name::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {

  return true;
}

void Name::Swap(Name* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Name::InternalSwap(Name* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Name_descriptor_;
  metadata.reflection = Name_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Name

// optional string name = 1;
void Name::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Name::name() const {
  // @@protoc_insertion_point(field_get:underworlds.Name.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Name::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Name.name)
}
 void Name::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Name.name)
}
 void Name::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Name.name)
}
 ::std::string* Name::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Name.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Name::release_name() {
  // @@protoc_insertion_point(field_release:underworlds.Name.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Name::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Name.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Size::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Size::Size()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Size)
}

void Size::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Size::Size(const Size& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Size)
}

void Size::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  size_ = 0;
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:underworlds.Size)
  SharedDtor();
}

void Size::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Size::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Size_descriptor_;
}

const Size& Size::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Size* Size::default_instance_ = NULL;

Size* Size::New(::google::protobuf::Arena* arena) const {
  Size* n = new Size;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Size)
  size_ = 0;
}

bool Size::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Size)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Size)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Size)
  return false;
#undef DO_
}

void Size::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Size)
  // optional int32 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Size)
}

::google::protobuf::uint8* Size::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Size)
  // optional int32 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Size)
  return target;
}

int Size::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Size)
  int total_size = 0;

  // optional int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Size)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Size* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Size>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Size)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Size)
    MergeFrom(*source);
  }
}

void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Size)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Size::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {

  return true;
}

void Size::Swap(Size* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Size::InternalSwap(Size* other) {
  std::swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Size::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Size_descriptor_;
  metadata.reflection = Size_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Size

// optional int32 size = 1;
void Size::clear_size() {
  size_ = 0;
}
 ::google::protobuf::int32 Size::size() const {
  // @@protoc_insertion_point(field_get:underworlds.Size.size)
  return size_;
}
 void Size::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Size.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pointf::kXFieldNumber;
const int Pointf::kYFieldNumber;
const int Pointf::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pointf::Pointf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Pointf)
}

void Pointf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Pointf::Pointf(const Pointf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Pointf)
}

void Pointf::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Pointf::~Pointf() {
  // @@protoc_insertion_point(destructor:underworlds.Pointf)
  SharedDtor();
}

void Pointf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pointf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pointf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pointf_descriptor_;
}

const Pointf& Pointf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Pointf* Pointf::default_instance_ = NULL;

Pointf* Pointf::New(::google::protobuf::Arena* arena) const {
  Pointf* n = new Pointf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pointf::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Pointf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Pointf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Pointf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Pointf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Pointf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Pointf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Pointf)
  return false;
#undef DO_
}

void Pointf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Pointf)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Pointf)
}

::google::protobuf::uint8* Pointf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Pointf)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Pointf)
  return target;
}

int Pointf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Pointf)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pointf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Pointf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pointf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pointf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Pointf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Pointf)
    MergeFrom(*source);
  }
}

void Pointf::MergeFrom(const Pointf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Pointf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Pointf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Pointf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pointf::CopyFrom(const Pointf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Pointf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pointf::IsInitialized() const {

  return true;
}

void Pointf::Swap(Pointf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pointf::InternalSwap(Pointf* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pointf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pointf_descriptor_;
  metadata.reflection = Pointf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pointf

// optional float x = 1;
void Pointf::clear_x() {
  x_ = 0;
}
 float Pointf::x() const {
  // @@protoc_insertion_point(field_get:underworlds.Pointf.x)
  return x_;
}
 void Pointf::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Pointf.x)
}

// optional float y = 2;
void Pointf::clear_y() {
  y_ = 0;
}
 float Pointf::y() const {
  // @@protoc_insertion_point(field_get:underworlds.Pointf.y)
  return y_;
}
 void Pointf::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Pointf.y)
}

// optional float z = 3;
void Pointf::clear_z() {
  z_ = 0;
}
 float Pointf::z() const {
  // @@protoc_insertion_point(field_get:underworlds.Pointf.z)
  return z_;
}
 void Pointf::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Pointf.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Point)
}

void Point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Point)
}

void Point::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:underworlds.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional sint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional sint32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Point)
  // optional sint32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }

  // optional sint32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }

  // optional sint32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Point)
  // optional sint32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }

  // optional sint32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }

  // optional sint32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Point)
  int total_size = 0;

  // optional sint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->x());
  }

  // optional sint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->y());
  }

  // optional sint32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->z());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional sint32 x = 1;
void Point::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:underworlds.Point.x)
  return x_;
}
 void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Point.x)
}

// optional sint32 y = 2;
void Point::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:underworlds.Point.y)
  return y_;
}
 void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Point.y)
}

// optional sint32 z = 3;
void Point::clear_z() {
  z_ = 0;
}
 ::google::protobuf::int32 Point::z() const {
  // @@protoc_insertion_point(field_get:underworlds.Point.z)
  return z_;
}
 void Point::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
const int Color::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Color)
}

void Color::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Color)
}

void Color::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  a_ = 0;
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:underworlds.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Color)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Color, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Color*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(r_, a_);

#undef ZR_HELPER_
#undef ZR_

}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float r = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_g;
        break;
      }

      // optional float g = 2;
      case 2: {
        if (tag == 21) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_b;
        break;
      }

      // optional float b = 3;
      case 3: {
        if (tag == 29) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_a;
        break;
      }

      // optional float a = 4;
      case 4: {
        if (tag == 37) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Color)
  // optional float r = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // optional float g = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // optional float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // optional float a = 4;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Color)
}

::google::protobuf::uint8* Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Color)
  // optional float r = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // optional float g = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // optional float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // optional float a = 4;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Color)
  return target;
}

int Color::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Color)
  int total_size = 0;

  // optional float r = 1;
  if (this->r() != 0) {
    total_size += 1 + 4;
  }

  // optional float g = 2;
  if (this->g() != 0) {
    total_size += 1 + 4;
  }

  // optional float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // optional float a = 4;
  if (this->a() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(a_, other->a_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional float r = 1;
void Color::clear_r() {
  r_ = 0;
}
 float Color::r() const {
  // @@protoc_insertion_point(field_get:underworlds.Color.r)
  return r_;
}
 void Color::set_r(float value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Color.r)
}

// optional float g = 2;
void Color::clear_g() {
  g_ = 0;
}
 float Color::g() const {
  // @@protoc_insertion_point(field_get:underworlds.Color.g)
  return g_;
}
 void Color::set_g(float value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Color.g)
}

// optional float b = 3;
void Color::clear_b() {
  b_ = 0;
}
 float Color::b() const {
  // @@protoc_insertion_point(field_get:underworlds.Color.b)
  return b_;
}
 void Color::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Color.b)
}

// optional float a = 4;
void Color::clear_a() {
  a_ = 0;
}
 float Color::a() const {
  // @@protoc_insertion_point(field_get:underworlds.Color.a)
  return a_;
}
 void Color::set_a(float value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Color.a)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Client::kIdFieldNumber;
const int Client::kNameFieldNumber;
const int Client::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Client::Client()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Client)
}

void Client::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Client::Client(const Client& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Client)
}

void Client::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Client::~Client() {
  // @@protoc_insertion_point(destructor:underworlds.Client)
  SharedDtor();
}

void Client::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_descriptor_;
}

const Client& Client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Client* Client::default_instance_ = NULL;

Client* Client::New(::google::protobuf::Arena* arena) const {
  Client* n = new Client;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Client::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Client)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  links_.Clear();
}

bool Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Client)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Client.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Client.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_links;
        break;
      }

      // repeated .underworlds.ClientInteraction links = 3;
      case 3: {
        if (tag == 26) {
         parse_links:
          DO_(input->IncrementRecursionDepth());
         parse_loop_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Client)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Client)
  return false;
#undef DO_
}

void Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Client)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Client.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Client.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .underworlds.ClientInteraction links = 3;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->links(i), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Client)
}

::google::protobuf::uint8* Client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Client)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Client.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Client.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .underworlds.ClientInteraction links = 3;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->links(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Client)
  return target;
}

int Client::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Client)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .underworlds.ClientInteraction links = 3;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Client)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Client* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Client>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Client)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Client)
    MergeFrom(*source);
  }
}

void Client::MergeFrom(const Client& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Client)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  links_.MergeFrom(from.links_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Client::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client::CopyFrom(const Client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client::IsInitialized() const {

  return true;
}

void Client::Swap(Client* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Client::InternalSwap(Client* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  links_.UnsafeArenaSwap(&other->links_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client_descriptor_;
  metadata.reflection = Client_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Client

// optional string id = 1;
void Client::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Client::id() const {
  // @@protoc_insertion_point(field_get:underworlds.Client.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Client::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Client.id)
}
 void Client::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Client.id)
}
 void Client::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Client.id)
}
 ::std::string* Client::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Client.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Client::release_id() {
  // @@protoc_insertion_point(field_release:underworlds.Client.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Client::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Client.id)
}

// optional string name = 2;
void Client::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Client::name() const {
  // @@protoc_insertion_point(field_get:underworlds.Client.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Client::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Client.name)
}
 void Client::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Client.name)
}
 void Client::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Client.name)
}
 ::std::string* Client::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Client.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Client::release_name() {
  // @@protoc_insertion_point(field_release:underworlds.Client.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Client::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Client.name)
}

// repeated .underworlds.ClientInteraction links = 3;
int Client::links_size() const {
  return links_.size();
}
void Client::clear_links() {
  links_.Clear();
}
const ::underworlds::ClientInteraction& Client::links(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Client.links)
  return links_.Get(index);
}
::underworlds::ClientInteraction* Client::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Client.links)
  return links_.Mutable(index);
}
::underworlds::ClientInteraction* Client::add_links() {
  // @@protoc_insertion_point(field_add:underworlds.Client.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::underworlds::ClientInteraction >*
Client::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Client.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::underworlds::ClientInteraction >&
Client::links() const {
  // @@protoc_insertion_point(field_list:underworlds.Client.links)
  return links_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientInteraction_InteractionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInteraction_InteractionType_descriptor_;
}
bool ClientInteraction_InteractionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientInteraction_InteractionType ClientInteraction::READER;
const ClientInteraction_InteractionType ClientInteraction::PROVIDER;
const ClientInteraction_InteractionType ClientInteraction::MONITOR;
const ClientInteraction_InteractionType ClientInteraction::FILTER;
const ClientInteraction_InteractionType ClientInteraction::InteractionType_MIN;
const ClientInteraction_InteractionType ClientInteraction::InteractionType_MAX;
const int ClientInteraction::InteractionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientInteraction::kWorldFieldNumber;
const int ClientInteraction::kTypeFieldNumber;
const int ClientInteraction::kLastActivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientInteraction::ClientInteraction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.ClientInteraction)
}

void ClientInteraction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  last_activity_ = const_cast< ::underworlds::Time*>(&::underworlds::Time::default_instance());
}

ClientInteraction::ClientInteraction(const ClientInteraction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.ClientInteraction)
}

void ClientInteraction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  world_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  last_activity_ = NULL;
}

ClientInteraction::~ClientInteraction() {
  // @@protoc_insertion_point(destructor:underworlds.ClientInteraction)
  SharedDtor();
}

void ClientInteraction::SharedDtor() {
  world_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete last_activity_;
  }
}

void ClientInteraction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientInteraction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInteraction_descriptor_;
}

const ClientInteraction& ClientInteraction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

ClientInteraction* ClientInteraction::default_instance_ = NULL;

ClientInteraction* ClientInteraction::New(::google::protobuf::Arena* arena) const {
  ClientInteraction* n = new ClientInteraction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientInteraction::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.ClientInteraction)
  world_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && last_activity_ != NULL) delete last_activity_;
  last_activity_ = NULL;
}

bool ClientInteraction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.ClientInteraction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string world = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->world().data(), this->world().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.ClientInteraction.world"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .underworlds.ClientInteraction.InteractionType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::underworlds::ClientInteraction_InteractionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_activity;
        break;
      }

      // optional .underworlds.Time last_activity = 3;
      case 3: {
        if (tag == 26) {
         parse_last_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.ClientInteraction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.ClientInteraction)
  return false;
#undef DO_
}

void ClientInteraction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.ClientInteraction)
  // optional string world = 1;
  if (this->world().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->world().data(), this->world().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.ClientInteraction.world");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->world(), output);
  }

  // optional .underworlds.ClientInteraction.InteractionType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .underworlds.Time last_activity = 3;
  if (this->has_last_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->last_activity_, output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.ClientInteraction)
}

::google::protobuf::uint8* ClientInteraction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.ClientInteraction)
  // optional string world = 1;
  if (this->world().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->world().data(), this->world().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.ClientInteraction.world");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->world(), target);
  }

  // optional .underworlds.ClientInteraction.InteractionType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .underworlds.Time last_activity = 3;
  if (this->has_last_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->last_activity_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.ClientInteraction)
  return target;
}

int ClientInteraction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.ClientInteraction)
  int total_size = 0;

  // optional string world = 1;
  if (this->world().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->world());
  }

  // optional .underworlds.ClientInteraction.InteractionType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .underworlds.Time last_activity = 3;
  if (this->has_last_activity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->last_activity_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientInteraction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.ClientInteraction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientInteraction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientInteraction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.ClientInteraction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.ClientInteraction)
    MergeFrom(*source);
  }
}

void ClientInteraction::MergeFrom(const ClientInteraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.ClientInteraction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.world().size() > 0) {

    world_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.world_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_last_activity()) {
    mutable_last_activity()->::underworlds::Time::MergeFrom(from.last_activity());
  }
}

void ClientInteraction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.ClientInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInteraction::CopyFrom(const ClientInteraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.ClientInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInteraction::IsInitialized() const {

  return true;
}

void ClientInteraction::Swap(ClientInteraction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientInteraction::InternalSwap(ClientInteraction* other) {
  world_.Swap(&other->world_);
  std::swap(type_, other->type_);
  std::swap(last_activity_, other->last_activity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientInteraction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientInteraction_descriptor_;
  metadata.reflection = ClientInteraction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientInteraction

// optional string world = 1;
void ClientInteraction::clear_world() {
  world_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClientInteraction::world() const {
  // @@protoc_insertion_point(field_get:underworlds.ClientInteraction.world)
  return world_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientInteraction::set_world(const ::std::string& value) {
  
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.ClientInteraction.world)
}
 void ClientInteraction::set_world(const char* value) {
  
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.ClientInteraction.world)
}
 void ClientInteraction::set_world(const char* value, size_t size) {
  
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.ClientInteraction.world)
}
 ::std::string* ClientInteraction::mutable_world() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.ClientInteraction.world)
  return world_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientInteraction::release_world() {
  // @@protoc_insertion_point(field_release:underworlds.ClientInteraction.world)
  
  return world_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientInteraction::set_allocated_world(::std::string* world) {
  if (world != NULL) {
    
  } else {
    
  }
  world_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), world);
  // @@protoc_insertion_point(field_set_allocated:underworlds.ClientInteraction.world)
}

// optional .underworlds.ClientInteraction.InteractionType type = 2;
void ClientInteraction::clear_type() {
  type_ = 0;
}
 ::underworlds::ClientInteraction_InteractionType ClientInteraction::type() const {
  // @@protoc_insertion_point(field_get:underworlds.ClientInteraction.type)
  return static_cast< ::underworlds::ClientInteraction_InteractionType >(type_);
}
 void ClientInteraction::set_type(::underworlds::ClientInteraction_InteractionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:underworlds.ClientInteraction.type)
}

// optional .underworlds.Time last_activity = 3;
bool ClientInteraction::has_last_activity() const {
  return !_is_default_instance_ && last_activity_ != NULL;
}
void ClientInteraction::clear_last_activity() {
  if (GetArenaNoVirtual() == NULL && last_activity_ != NULL) delete last_activity_;
  last_activity_ = NULL;
}
const ::underworlds::Time& ClientInteraction::last_activity() const {
  // @@protoc_insertion_point(field_get:underworlds.ClientInteraction.last_activity)
  return last_activity_ != NULL ? *last_activity_ : *default_instance_->last_activity_;
}
::underworlds::Time* ClientInteraction::mutable_last_activity() {
  
  if (last_activity_ == NULL) {
    last_activity_ = new ::underworlds::Time;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.ClientInteraction.last_activity)
  return last_activity_;
}
::underworlds::Time* ClientInteraction::release_last_activity() {
  // @@protoc_insertion_point(field_release:underworlds.ClientInteraction.last_activity)
  
  ::underworlds::Time* temp = last_activity_;
  last_activity_ = NULL;
  return temp;
}
void ClientInteraction::set_allocated_last_activity(::underworlds::Time* last_activity) {
  delete last_activity_;
  last_activity_ = last_activity;
  if (last_activity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.ClientInteraction.last_activity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Context::kClientFieldNumber;
const int Context::kWorldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Context::Context()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Context)
}

void Context::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Context::Context(const Context& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Context)
}

void Context::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:underworlds.Context)
  SharedDtor();
}

void Context::SharedDtor() {
  client_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Context::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_descriptor_;
}

const Context& Context::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Context* Context::default_instance_ = NULL;

Context* Context::New(::google::protobuf::Arena* arena) const {
  Context* n = new Context;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Context)
  client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Context)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client().data(), this->client().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Context.client"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_world;
        break;
      }

      // optional string world = 2;
      case 2: {
        if (tag == 18) {
         parse_world:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->world().data(), this->world().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Context.world"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Context)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Context)
  return false;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Context)
  // optional string client = 1;
  if (this->client().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client().data(), this->client().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Context.client");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client(), output);
  }

  // optional string world = 2;
  if (this->world().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->world().data(), this->world().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Context.world");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->world(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Context)
}

::google::protobuf::uint8* Context::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Context)
  // optional string client = 1;
  if (this->client().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client().data(), this->client().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Context.client");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client(), target);
  }

  // optional string world = 2;
  if (this->world().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->world().data(), this->world().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Context.world");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->world(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Context)
  return target;
}

int Context::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Context)
  int total_size = 0;

  // optional string client = 1;
  if (this->client().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client());
  }

  // optional string world = 2;
  if (this->world().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->world());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Context::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Context)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Context* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Context>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Context)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Context)
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Context)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.client().size() > 0) {

    client_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_);
  }
  if (from.world().size() > 0) {

    world_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.world_);
  }
}

void Context::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {

  return true;
}

void Context::Swap(Context* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Context::InternalSwap(Context* other) {
  client_.Swap(&other->client_);
  world_.Swap(&other->world_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Context::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Context_descriptor_;
  metadata.reflection = Context_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Context

// optional string client = 1;
void Context::clear_client() {
  client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Context::client() const {
  // @@protoc_insertion_point(field_get:underworlds.Context.client)
  return client_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Context::set_client(const ::std::string& value) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Context.client)
}
 void Context::set_client(const char* value) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Context.client)
}
 void Context::set_client(const char* value, size_t size) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Context.client)
}
 ::std::string* Context::mutable_client() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Context.client)
  return client_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Context::release_client() {
  // @@protoc_insertion_point(field_release:underworlds.Context.client)
  
  return client_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Context::set_allocated_client(::std::string* client) {
  if (client != NULL) {
    
  } else {
    
  }
  client_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Context.client)
}

// optional string world = 2;
void Context::clear_world() {
  world_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Context::world() const {
  // @@protoc_insertion_point(field_get:underworlds.Context.world)
  return world_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Context::set_world(const ::std::string& value) {
  
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Context.world)
}
 void Context::set_world(const char* value) {
  
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Context.world)
}
 void Context::set_world(const char* value, size_t size) {
  
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Context.world)
}
 ::std::string* Context::mutable_world() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Context.world)
  return world_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Context::release_world() {
  // @@protoc_insertion_point(field_release:underworlds.Context.world)
  
  return world_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Context::set_allocated_world(::std::string* world) {
  if (world != NULL) {
    
  } else {
    
  }
  world_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), world);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Context.world)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Topology::kWorldsFieldNumber;
const int Topology::kClientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Topology::Topology()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Topology)
}

void Topology::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Topology::Topology(const Topology& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Topology)
}

void Topology::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

Topology::~Topology() {
  // @@protoc_insertion_point(destructor:underworlds.Topology)
  SharedDtor();
}

void Topology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Topology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topology_descriptor_;
}

const Topology& Topology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Topology* Topology::default_instance_ = NULL;

Topology* Topology::New(::google::protobuf::Arena* arena) const {
  Topology* n = new Topology;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Topology::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Topology)
  worlds_.Clear();
  clients_.Clear();
}

bool Topology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Topology)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string worlds = 1;
      case 1: {
        if (tag == 10) {
         parse_worlds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_worlds()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worlds(this->worlds_size() - 1).data(),
            this->worlds(this->worlds_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Topology.worlds"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_worlds;
        if (input->ExpectTag(18)) goto parse_clients;
        break;
      }

      // repeated .underworlds.Client clients = 2;
      case 2: {
        if (tag == 18) {
         parse_clients:
          DO_(input->IncrementRecursionDepth());
         parse_loop_clients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_clients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_clients;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Topology)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Topology)
  return false;
#undef DO_
}

void Topology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Topology)
  // repeated string worlds = 1;
  for (int i = 0; i < this->worlds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worlds(i).data(), this->worlds(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Topology.worlds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->worlds(i), output);
  }

  // repeated .underworlds.Client clients = 2;
  for (unsigned int i = 0, n = this->clients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clients(i), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Topology)
}

::google::protobuf::uint8* Topology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Topology)
  // repeated string worlds = 1;
  for (int i = 0; i < this->worlds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worlds(i).data(), this->worlds(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Topology.worlds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->worlds(i), target);
  }

  // repeated .underworlds.Client clients = 2;
  for (unsigned int i = 0, n = this->clients_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clients(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Topology)
  return target;
}

int Topology::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Topology)
  int total_size = 0;

  // repeated string worlds = 1;
  total_size += 1 * this->worlds_size();
  for (int i = 0; i < this->worlds_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->worlds(i));
  }

  // repeated .underworlds.Client clients = 2;
  total_size += 1 * this->clients_size();
  for (int i = 0; i < this->clients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clients(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topology::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Topology)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Topology* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Topology>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Topology)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Topology)
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Topology)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  worlds_.MergeFrom(from.worlds_);
  clients_.MergeFrom(from.clients_);
}

void Topology::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {

  return true;
}

void Topology::Swap(Topology* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Topology::InternalSwap(Topology* other) {
  worlds_.UnsafeArenaSwap(&other->worlds_);
  clients_.UnsafeArenaSwap(&other->clients_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Topology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Topology_descriptor_;
  metadata.reflection = Topology_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Topology

// repeated string worlds = 1;
int Topology::worlds_size() const {
  return worlds_.size();
}
void Topology::clear_worlds() {
  worlds_.Clear();
}
 const ::std::string& Topology::worlds(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Topology.worlds)
  return worlds_.Get(index);
}
 ::std::string* Topology::mutable_worlds(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Topology.worlds)
  return worlds_.Mutable(index);
}
 void Topology::set_worlds(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:underworlds.Topology.worlds)
  worlds_.Mutable(index)->assign(value);
}
 void Topology::set_worlds(int index, const char* value) {
  worlds_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:underworlds.Topology.worlds)
}
 void Topology::set_worlds(int index, const char* value, size_t size) {
  worlds_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:underworlds.Topology.worlds)
}
 ::std::string* Topology::add_worlds() {
  // @@protoc_insertion_point(field_add_mutable:underworlds.Topology.worlds)
  return worlds_.Add();
}
 void Topology::add_worlds(const ::std::string& value) {
  worlds_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:underworlds.Topology.worlds)
}
 void Topology::add_worlds(const char* value) {
  worlds_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:underworlds.Topology.worlds)
}
 void Topology::add_worlds(const char* value, size_t size) {
  worlds_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:underworlds.Topology.worlds)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Topology::worlds() const {
  // @@protoc_insertion_point(field_list:underworlds.Topology.worlds)
  return worlds_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Topology::mutable_worlds() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Topology.worlds)
  return &worlds_;
}

// repeated .underworlds.Client clients = 2;
int Topology::clients_size() const {
  return clients_.size();
}
void Topology::clear_clients() {
  clients_.Clear();
}
const ::underworlds::Client& Topology::clients(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Topology.clients)
  return clients_.Get(index);
}
::underworlds::Client* Topology::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Topology.clients)
  return clients_.Mutable(index);
}
::underworlds::Client* Topology::add_clients() {
  // @@protoc_insertion_point(field_add:underworlds.Topology.clients)
  return clients_.Add();
}
::google::protobuf::RepeatedPtrField< ::underworlds::Client >*
Topology::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Topology.clients)
  return &clients_;
}
const ::google::protobuf::RepeatedPtrField< ::underworlds::Client >&
Topology::clients() const {
  // @@protoc_insertion_point(field_list:underworlds.Topology.clients)
  return clients_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Node_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_NodeType_descriptor_;
}
bool Node_NodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_NodeType Node::UNDEFINED;
const Node_NodeType Node::ENTITY;
const Node_NodeType Node::MESH;
const Node_NodeType Node::CAMERA;
const Node_NodeType Node::NodeType_MIN;
const Node_NodeType Node::NodeType_MAX;
const int Node::NodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kTypeFieldNumber;
const int Node::kParentFieldNumber;
const int Node::kChildrenFieldNumber;
const int Node::kTransformationFieldNumber;
const int Node::kLastUpdateFieldNumber;
const int Node::kLowresFieldNumber;
const int Node::kHiresFieldNumber;
const int Node::kCadFieldNumber;
const int Node::kAabbFieldNumber;
const int Node::kPhysicsFieldNumber;
const int Node::kClipplanenearFieldNumber;
const int Node::kClipplanefarFieldNumber;
const int Node::kAspectFieldNumber;
const int Node::kHorizontalfovFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_update_ = 0;
  physics_ = false;
  clipplanenear_ = 0;
  clipplanefar_ = 0;
  aspect_ = 0;
  horizontalfov_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:underworlds.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Node)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Node, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Node*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(last_update_, type_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(clipplanenear_, horizontalfov_);
  physics_ = false;

#undef ZR_HELPER_
#undef ZR_

  children_.Clear();
  transformation_.Clear();
  lowres_.Clear();
  hires_.Clear();
  cad_.Clear();
  aabb_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Node.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .underworlds.Node.NodeType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::underworlds::Node_NodeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parent;
        break;
      }

      // optional string parent = 4;
      case 4: {
        if (tag == 34) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Node.parent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_children;
        break;
      }

      // repeated string children = 5;
      case 5: {
        if (tag == 42) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_children()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->children(this->children_size() - 1).data(),
            this->children(this->children_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Node.children"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_children;
        if (input->ExpectTag(50)) goto parse_transformation;
        break;
      }

      // repeated float transformation = 6;
      case 6: {
        if (tag == 50) {
         parse_transformation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_transformation())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_transformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_last_update;
        break;
      }

      // optional double last_update = 8;
      case 8: {
        if (tag == 65) {
         parse_last_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_update_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_lowres;
        break;
      }

      // repeated string lowres = 16;
      case 16: {
        if (tag == 130) {
         parse_lowres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lowres()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lowres(this->lowres_size() - 1).data(),
            this->lowres(this->lowres_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Node.lowres"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_lowres;
        if (input->ExpectTag(138)) goto parse_hires;
        break;
      }

      // repeated string hires = 17;
      case 17: {
        if (tag == 138) {
         parse_hires:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hires()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hires(this->hires_size() - 1).data(),
            this->hires(this->hires_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Node.hires"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_hires;
        if (input->ExpectTag(146)) goto parse_cad;
        break;
      }

      // repeated string cad = 18;
      case 18: {
        if (tag == 146) {
         parse_cad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cad()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cad(this->cad_size() - 1).data(),
            this->cad(this->cad_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Node.cad"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_cad;
        if (input->ExpectTag(154)) goto parse_aabb;
        break;
      }

      // repeated .underworlds.Pointf aabb = 19;
      case 19: {
        if (tag == 154) {
         parse_aabb:
          DO_(input->IncrementRecursionDepth());
         parse_loop_aabb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_aabb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_loop_aabb;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(240)) goto parse_physics;
        break;
      }

      // optional bool physics = 30;
      case 30: {
        if (tag == 240) {
         parse_physics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &physics_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_clipplanenear;
        break;
      }

      // optional float clipplanenear = 40;
      case 40: {
        if (tag == 325) {
         parse_clipplanenear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clipplanenear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_clipplanefar;
        break;
      }

      // optional float clipplanefar = 41;
      case 41: {
        if (tag == 333) {
         parse_clipplanefar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clipplanefar_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_aspect;
        break;
      }

      // optional float aspect = 42;
      case 42: {
        if (tag == 341) {
         parse_aspect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aspect_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(349)) goto parse_horizontalfov;
        break;
      }

      // optional float horizontalfov = 43;
      case 43: {
        if (tag == 349) {
         parse_horizontalfov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontalfov_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Node)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .underworlds.Node.NodeType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string parent = 4;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parent(), output);
  }

  // repeated string children = 5;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->children(i).data(), this->children(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.children");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->children(i), output);
  }

  // repeated float transformation = 6;
  if (this->transformation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_transformation_cached_byte_size_);
  }
  for (int i = 0; i < this->transformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->transformation(i), output);
  }

  // optional double last_update = 8;
  if (this->last_update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->last_update(), output);
  }

  // repeated string lowres = 16;
  for (int i = 0; i < this->lowres_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lowres(i).data(), this->lowres(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.lowres");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->lowres(i), output);
  }

  // repeated string hires = 17;
  for (int i = 0; i < this->hires_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hires(i).data(), this->hires(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.hires");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->hires(i), output);
  }

  // repeated string cad = 18;
  for (int i = 0; i < this->cad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cad(i).data(), this->cad(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.cad");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->cad(i), output);
  }

  // repeated .underworlds.Pointf aabb = 19;
  for (unsigned int i = 0, n = this->aabb_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->aabb(i), output);
  }

  // optional bool physics = 30;
  if (this->physics() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->physics(), output);
  }

  // optional float clipplanenear = 40;
  if (this->clipplanenear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->clipplanenear(), output);
  }

  // optional float clipplanefar = 41;
  if (this->clipplanefar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->clipplanefar(), output);
  }

  // optional float aspect = 42;
  if (this->aspect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->aspect(), output);
  }

  // optional float horizontalfov = 43;
  if (this->horizontalfov() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->horizontalfov(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Node)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .underworlds.Node.NodeType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string parent = 4;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parent(), target);
  }

  // repeated string children = 5;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->children(i).data(), this->children(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.children");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->children(i), target);
  }

  // repeated float transformation = 6;
  if (this->transformation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _transformation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->transformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->transformation(i), target);
  }

  // optional double last_update = 8;
  if (this->last_update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->last_update(), target);
  }

  // repeated string lowres = 16;
  for (int i = 0; i < this->lowres_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lowres(i).data(), this->lowres(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.lowres");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->lowres(i), target);
  }

  // repeated string hires = 17;
  for (int i = 0; i < this->hires_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hires(i).data(), this->hires(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.hires");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->hires(i), target);
  }

  // repeated string cad = 18;
  for (int i = 0; i < this->cad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cad(i).data(), this->cad(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Node.cad");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->cad(i), target);
  }

  // repeated .underworlds.Pointf aabb = 19;
  for (unsigned int i = 0, n = this->aabb_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->aabb(i), target);
  }

  // optional bool physics = 30;
  if (this->physics() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->physics(), target);
  }

  // optional float clipplanenear = 40;
  if (this->clipplanenear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->clipplanenear(), target);
  }

  // optional float clipplanefar = 41;
  if (this->clipplanefar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->clipplanefar(), target);
  }

  // optional float aspect = 42;
  if (this->aspect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->aspect(), target);
  }

  // optional float horizontalfov = 43;
  if (this->horizontalfov() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->horizontalfov(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Node)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .underworlds.Node.NodeType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string parent = 4;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // optional double last_update = 8;
  if (this->last_update() != 0) {
    total_size += 1 + 8;
  }

  // optional bool physics = 30;
  if (this->physics() != 0) {
    total_size += 2 + 1;
  }

  // optional float clipplanenear = 40;
  if (this->clipplanenear() != 0) {
    total_size += 2 + 4;
  }

  // optional float clipplanefar = 41;
  if (this->clipplanefar() != 0) {
    total_size += 2 + 4;
  }

  // optional float aspect = 42;
  if (this->aspect() != 0) {
    total_size += 2 + 4;
  }

  // optional float horizontalfov = 43;
  if (this->horizontalfov() != 0) {
    total_size += 2 + 4;
  }

  // repeated string children = 5;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->children(i));
  }

  // repeated float transformation = 6;
  {
    int data_size = 0;
    data_size = 4 * this->transformation_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _transformation_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string lowres = 16;
  total_size += 2 * this->lowres_size();
  for (int i = 0; i < this->lowres_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lowres(i));
  }

  // repeated string hires = 17;
  total_size += 2 * this->hires_size();
  for (int i = 0; i < this->hires_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hires(i));
  }

  // repeated string cad = 18;
  total_size += 2 * this->cad_size();
  for (int i = 0; i < this->cad_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cad(i));
  }

  // repeated .underworlds.Pointf aabb = 19;
  total_size += 2 * this->aabb_size();
  for (int i = 0; i < this->aabb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aabb(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  children_.MergeFrom(from.children_);
  transformation_.MergeFrom(from.transformation_);
  lowres_.MergeFrom(from.lowres_);
  hires_.MergeFrom(from.hires_);
  cad_.MergeFrom(from.cad_);
  aabb_.MergeFrom(from.aabb_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.last_update() != 0) {
    set_last_update(from.last_update());
  }
  if (from.physics() != 0) {
    set_physics(from.physics());
  }
  if (from.clipplanenear() != 0) {
    set_clipplanenear(from.clipplanenear());
  }
  if (from.clipplanefar() != 0) {
    set_clipplanefar(from.clipplanefar());
  }
  if (from.aspect() != 0) {
    set_aspect(from.aspect());
  }
  if (from.horizontalfov() != 0) {
    set_horizontalfov(from.horizontalfov());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  parent_.Swap(&other->parent_);
  children_.UnsafeArenaSwap(&other->children_);
  transformation_.UnsafeArenaSwap(&other->transformation_);
  std::swap(last_update_, other->last_update_);
  lowres_.UnsafeArenaSwap(&other->lowres_);
  hires_.UnsafeArenaSwap(&other->hires_);
  cad_.UnsafeArenaSwap(&other->cad_);
  aabb_.UnsafeArenaSwap(&other->aabb_);
  std::swap(physics_, other->physics_);
  std::swap(clipplanenear_, other->clipplanenear_);
  std::swap(clipplanefar_, other->clipplanefar_);
  std::swap(aspect_, other->aspect_);
  std::swap(horizontalfov_, other->horizontalfov_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string id = 1;
void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Node.id)
}
 void Node::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Node.id)
}
 void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Node.id)
}
 ::std::string* Node::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:underworlds.Node.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Node.id)
}

// optional string name = 2;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Node.name)
}
 void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Node.name)
}
 void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Node.name)
}
 ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:underworlds.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Node.name)
}

// optional .underworlds.Node.NodeType type = 3;
void Node::clear_type() {
  type_ = 0;
}
 ::underworlds::Node_NodeType Node::type() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.type)
  return static_cast< ::underworlds::Node_NodeType >(type_);
}
 void Node::set_type(::underworlds::Node_NodeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Node.type)
}

// optional string parent = 4;
void Node::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::parent() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Node.parent)
}
 void Node::set_parent(const char* value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Node.parent)
}
 void Node::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Node.parent)
}
 ::std::string* Node::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Node.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_parent() {
  // @@protoc_insertion_point(field_release:underworlds.Node.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Node.parent)
}

// repeated string children = 5;
int Node::children_size() const {
  return children_.size();
}
void Node::clear_children() {
  children_.Clear();
}
 const ::std::string& Node::children(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Node.children)
  return children_.Get(index);
}
 ::std::string* Node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Node.children)
  return children_.Mutable(index);
}
 void Node::set_children(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:underworlds.Node.children)
  children_.Mutable(index)->assign(value);
}
 void Node::set_children(int index, const char* value) {
  children_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:underworlds.Node.children)
}
 void Node::set_children(int index, const char* value, size_t size) {
  children_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:underworlds.Node.children)
}
 ::std::string* Node::add_children() {
  // @@protoc_insertion_point(field_add_mutable:underworlds.Node.children)
  return children_.Add();
}
 void Node::add_children(const ::std::string& value) {
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:underworlds.Node.children)
}
 void Node::add_children(const char* value) {
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:underworlds.Node.children)
}
 void Node::add_children(const char* value, size_t size) {
  children_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:underworlds.Node.children)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Node::children() const {
  // @@protoc_insertion_point(field_list:underworlds.Node.children)
  return children_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Node.children)
  return &children_;
}

// repeated float transformation = 6;
int Node::transformation_size() const {
  return transformation_.size();
}
void Node::clear_transformation() {
  transformation_.Clear();
}
 float Node::transformation(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Node.transformation)
  return transformation_.Get(index);
}
 void Node::set_transformation(int index, float value) {
  transformation_.Set(index, value);
  // @@protoc_insertion_point(field_set:underworlds.Node.transformation)
}
 void Node::add_transformation(float value) {
  transformation_.Add(value);
  // @@protoc_insertion_point(field_add:underworlds.Node.transformation)
}
 const ::google::protobuf::RepeatedField< float >&
Node::transformation() const {
  // @@protoc_insertion_point(field_list:underworlds.Node.transformation)
  return transformation_;
}
 ::google::protobuf::RepeatedField< float >*
Node::mutable_transformation() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Node.transformation)
  return &transformation_;
}

// optional double last_update = 8;
void Node::clear_last_update() {
  last_update_ = 0;
}
 double Node::last_update() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.last_update)
  return last_update_;
}
 void Node::set_last_update(double value) {
  
  last_update_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Node.last_update)
}

// repeated string lowres = 16;
int Node::lowres_size() const {
  return lowres_.size();
}
void Node::clear_lowres() {
  lowres_.Clear();
}
 const ::std::string& Node::lowres(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Node.lowres)
  return lowres_.Get(index);
}
 ::std::string* Node::mutable_lowres(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Node.lowres)
  return lowres_.Mutable(index);
}
 void Node::set_lowres(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:underworlds.Node.lowres)
  lowres_.Mutable(index)->assign(value);
}
 void Node::set_lowres(int index, const char* value) {
  lowres_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:underworlds.Node.lowres)
}
 void Node::set_lowres(int index, const char* value, size_t size) {
  lowres_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:underworlds.Node.lowres)
}
 ::std::string* Node::add_lowres() {
  // @@protoc_insertion_point(field_add_mutable:underworlds.Node.lowres)
  return lowres_.Add();
}
 void Node::add_lowres(const ::std::string& value) {
  lowres_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:underworlds.Node.lowres)
}
 void Node::add_lowres(const char* value) {
  lowres_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:underworlds.Node.lowres)
}
 void Node::add_lowres(const char* value, size_t size) {
  lowres_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:underworlds.Node.lowres)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Node::lowres() const {
  // @@protoc_insertion_point(field_list:underworlds.Node.lowres)
  return lowres_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Node::mutable_lowres() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Node.lowres)
  return &lowres_;
}

// repeated string hires = 17;
int Node::hires_size() const {
  return hires_.size();
}
void Node::clear_hires() {
  hires_.Clear();
}
 const ::std::string& Node::hires(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Node.hires)
  return hires_.Get(index);
}
 ::std::string* Node::mutable_hires(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Node.hires)
  return hires_.Mutable(index);
}
 void Node::set_hires(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:underworlds.Node.hires)
  hires_.Mutable(index)->assign(value);
}
 void Node::set_hires(int index, const char* value) {
  hires_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:underworlds.Node.hires)
}
 void Node::set_hires(int index, const char* value, size_t size) {
  hires_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:underworlds.Node.hires)
}
 ::std::string* Node::add_hires() {
  // @@protoc_insertion_point(field_add_mutable:underworlds.Node.hires)
  return hires_.Add();
}
 void Node::add_hires(const ::std::string& value) {
  hires_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:underworlds.Node.hires)
}
 void Node::add_hires(const char* value) {
  hires_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:underworlds.Node.hires)
}
 void Node::add_hires(const char* value, size_t size) {
  hires_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:underworlds.Node.hires)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Node::hires() const {
  // @@protoc_insertion_point(field_list:underworlds.Node.hires)
  return hires_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Node::mutable_hires() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Node.hires)
  return &hires_;
}

// repeated string cad = 18;
int Node::cad_size() const {
  return cad_.size();
}
void Node::clear_cad() {
  cad_.Clear();
}
 const ::std::string& Node::cad(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Node.cad)
  return cad_.Get(index);
}
 ::std::string* Node::mutable_cad(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Node.cad)
  return cad_.Mutable(index);
}
 void Node::set_cad(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:underworlds.Node.cad)
  cad_.Mutable(index)->assign(value);
}
 void Node::set_cad(int index, const char* value) {
  cad_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:underworlds.Node.cad)
}
 void Node::set_cad(int index, const char* value, size_t size) {
  cad_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:underworlds.Node.cad)
}
 ::std::string* Node::add_cad() {
  // @@protoc_insertion_point(field_add_mutable:underworlds.Node.cad)
  return cad_.Add();
}
 void Node::add_cad(const ::std::string& value) {
  cad_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:underworlds.Node.cad)
}
 void Node::add_cad(const char* value) {
  cad_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:underworlds.Node.cad)
}
 void Node::add_cad(const char* value, size_t size) {
  cad_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:underworlds.Node.cad)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Node::cad() const {
  // @@protoc_insertion_point(field_list:underworlds.Node.cad)
  return cad_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Node::mutable_cad() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Node.cad)
  return &cad_;
}

// repeated .underworlds.Pointf aabb = 19;
int Node::aabb_size() const {
  return aabb_.size();
}
void Node::clear_aabb() {
  aabb_.Clear();
}
const ::underworlds::Pointf& Node::aabb(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Node.aabb)
  return aabb_.Get(index);
}
::underworlds::Pointf* Node::mutable_aabb(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Node.aabb)
  return aabb_.Mutable(index);
}
::underworlds::Pointf* Node::add_aabb() {
  // @@protoc_insertion_point(field_add:underworlds.Node.aabb)
  return aabb_.Add();
}
::google::protobuf::RepeatedPtrField< ::underworlds::Pointf >*
Node::mutable_aabb() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Node.aabb)
  return &aabb_;
}
const ::google::protobuf::RepeatedPtrField< ::underworlds::Pointf >&
Node::aabb() const {
  // @@protoc_insertion_point(field_list:underworlds.Node.aabb)
  return aabb_;
}

// optional bool physics = 30;
void Node::clear_physics() {
  physics_ = false;
}
 bool Node::physics() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.physics)
  return physics_;
}
 void Node::set_physics(bool value) {
  
  physics_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Node.physics)
}

// optional float clipplanenear = 40;
void Node::clear_clipplanenear() {
  clipplanenear_ = 0;
}
 float Node::clipplanenear() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.clipplanenear)
  return clipplanenear_;
}
 void Node::set_clipplanenear(float value) {
  
  clipplanenear_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Node.clipplanenear)
}

// optional float clipplanefar = 41;
void Node::clear_clipplanefar() {
  clipplanefar_ = 0;
}
 float Node::clipplanefar() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.clipplanefar)
  return clipplanefar_;
}
 void Node::set_clipplanefar(float value) {
  
  clipplanefar_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Node.clipplanefar)
}

// optional float aspect = 42;
void Node::clear_aspect() {
  aspect_ = 0;
}
 float Node::aspect() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.aspect)
  return aspect_;
}
 void Node::set_aspect(float value) {
  
  aspect_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Node.aspect)
}

// optional float horizontalfov = 43;
void Node::clear_horizontalfov() {
  horizontalfov_ = 0;
}
 float Node::horizontalfov() const {
  // @@protoc_insertion_point(field_get:underworlds.Node.horizontalfov)
  return horizontalfov_;
}
 void Node::set_horizontalfov(float value) {
  
  horizontalfov_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Node.horizontalfov)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nodes::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nodes::Nodes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Nodes)
}

void Nodes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Nodes::Nodes(const Nodes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Nodes)
}

void Nodes::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

Nodes::~Nodes() {
  // @@protoc_insertion_point(destructor:underworlds.Nodes)
  SharedDtor();
}

void Nodes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Nodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nodes_descriptor_;
}

const Nodes& Nodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Nodes* Nodes::default_instance_ = NULL;

Nodes* Nodes::New(::google::protobuf::Arena* arena) const {
  Nodes* n = new Nodes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Nodes::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Nodes)
  ids_.Clear();
}

bool Nodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Nodes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (tag == 10) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ids(this->ids_size() - 1).data(),
            this->ids(this->ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Nodes.ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Nodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Nodes)
  return false;
#undef DO_
}

void Nodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Nodes)
  // repeated string ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), this->ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Nodes.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Nodes)
}

::google::protobuf::uint8* Nodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Nodes)
  // repeated string ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), this->ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Nodes.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Nodes)
  return target;
}

int Nodes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Nodes)
  int total_size = 0;

  // repeated string ids = 1;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nodes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Nodes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Nodes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Nodes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Nodes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Nodes)
    MergeFrom(*source);
  }
}

void Nodes::MergeFrom(const Nodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Nodes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ids_.MergeFrom(from.ids_);
}

void Nodes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Nodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nodes::CopyFrom(const Nodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Nodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nodes::IsInitialized() const {

  return true;
}

void Nodes::Swap(Nodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nodes::InternalSwap(Nodes* other) {
  ids_.UnsafeArenaSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Nodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nodes_descriptor_;
  metadata.reflection = Nodes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Nodes

// repeated string ids = 1;
int Nodes::ids_size() const {
  return ids_.size();
}
void Nodes::clear_ids() {
  ids_.Clear();
}
 const ::std::string& Nodes::ids(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Nodes.ids)
  return ids_.Get(index);
}
 ::std::string* Nodes::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Nodes.ids)
  return ids_.Mutable(index);
}
 void Nodes::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:underworlds.Nodes.ids)
  ids_.Mutable(index)->assign(value);
}
 void Nodes::set_ids(int index, const char* value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:underworlds.Nodes.ids)
}
 void Nodes::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:underworlds.Nodes.ids)
}
 ::std::string* Nodes::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:underworlds.Nodes.ids)
  return ids_.Add();
}
 void Nodes::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:underworlds.Nodes.ids)
}
 void Nodes::add_ids(const char* value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:underworlds.Nodes.ids)
}
 void Nodes::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:underworlds.Nodes.ids)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Nodes::ids() const {
  // @@protoc_insertion_point(field_list:underworlds.Nodes.ids)
  return ids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Nodes::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Nodes.ids)
  return &ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInContext::kContextFieldNumber;
const int NodeInContext::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInContext::NodeInContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.NodeInContext)
}

void NodeInContext::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::underworlds::Context*>(&::underworlds::Context::default_instance());
  node_ = const_cast< ::underworlds::Node*>(&::underworlds::Node::default_instance());
}

NodeInContext::NodeInContext(const NodeInContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.NodeInContext)
}

void NodeInContext::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
  node_ = NULL;
}

NodeInContext::~NodeInContext() {
  // @@protoc_insertion_point(destructor:underworlds.NodeInContext)
  SharedDtor();
}

void NodeInContext::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
    delete node_;
  }
}

void NodeInContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInContext_descriptor_;
}

const NodeInContext& NodeInContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

NodeInContext* NodeInContext::default_instance_ = NULL;

NodeInContext* NodeInContext::New(::google::protobuf::Arena* arena) const {
  NodeInContext* n = new NodeInContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInContext::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.NodeInContext)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}

bool NodeInContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.NodeInContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .underworlds.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // optional .underworlds.Node node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.NodeInContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.NodeInContext)
  return false;
#undef DO_
}

void NodeInContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.NodeInContext)
  // optional .underworlds.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional .underworlds.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.NodeInContext)
}

::google::protobuf::uint8* NodeInContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.NodeInContext)
  // optional .underworlds.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // optional .underworlds.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->node_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.NodeInContext)
  return target;
}

int NodeInContext::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.NodeInContext)
  int total_size = 0;

  // optional .underworlds.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional .underworlds.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.NodeInContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeInContext* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.NodeInContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.NodeInContext)
    MergeFrom(*source);
  }
}

void NodeInContext::MergeFrom(const NodeInContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.NodeInContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_context()) {
    mutable_context()->::underworlds::Context::MergeFrom(from.context());
  }
  if (from.has_node()) {
    mutable_node()->::underworlds::Node::MergeFrom(from.node());
  }
}

void NodeInContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.NodeInContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInContext::CopyFrom(const NodeInContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.NodeInContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInContext::IsInitialized() const {

  return true;
}

void NodeInContext::Swap(NodeInContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInContext::InternalSwap(NodeInContext* other) {
  std::swap(context_, other->context_);
  std::swap(node_, other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInContext_descriptor_;
  metadata.reflection = NodeInContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInContext

// optional .underworlds.Context context = 1;
bool NodeInContext::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void NodeInContext::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::underworlds::Context& NodeInContext::context() const {
  // @@protoc_insertion_point(field_get:underworlds.NodeInContext.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::underworlds::Context* NodeInContext::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::underworlds::Context;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.NodeInContext.context)
  return context_;
}
::underworlds::Context* NodeInContext::release_context() {
  // @@protoc_insertion_point(field_release:underworlds.NodeInContext.context)
  
  ::underworlds::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void NodeInContext::set_allocated_context(::underworlds::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.NodeInContext.context)
}

// optional .underworlds.Node node = 2;
bool NodeInContext::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
void NodeInContext::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::underworlds::Node& NodeInContext::node() const {
  // @@protoc_insertion_point(field_get:underworlds.NodeInContext.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
::underworlds::Node* NodeInContext::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::underworlds::Node;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.NodeInContext.node)
  return node_;
}
::underworlds::Node* NodeInContext::release_node() {
  // @@protoc_insertion_point(field_release:underworlds.NodeInContext.node)
  
  ::underworlds::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void NodeInContext::set_allocated_node(::underworlds::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.NodeInContext.node)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NodeInvalidation_NodeInvalidationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInvalidation_NodeInvalidationType_descriptor_;
}
bool NodeInvalidation_NodeInvalidationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NodeInvalidation_NodeInvalidationType NodeInvalidation::NEW;
const NodeInvalidation_NodeInvalidationType NodeInvalidation::UPDATE;
const NodeInvalidation_NodeInvalidationType NodeInvalidation::DELETE;
const NodeInvalidation_NodeInvalidationType NodeInvalidation::NodeInvalidationType_MIN;
const NodeInvalidation_NodeInvalidationType NodeInvalidation::NodeInvalidationType_MAX;
const int NodeInvalidation::NodeInvalidationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInvalidation::kTypeFieldNumber;
const int NodeInvalidation::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInvalidation::NodeInvalidation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.NodeInvalidation)
}

void NodeInvalidation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeInvalidation::NodeInvalidation(const NodeInvalidation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.NodeInvalidation)
}

void NodeInvalidation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NodeInvalidation::~NodeInvalidation() {
  // @@protoc_insertion_point(destructor:underworlds.NodeInvalidation)
  SharedDtor();
}

void NodeInvalidation::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NodeInvalidation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInvalidation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInvalidation_descriptor_;
}

const NodeInvalidation& NodeInvalidation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

NodeInvalidation* NodeInvalidation::default_instance_ = NULL;

NodeInvalidation* NodeInvalidation::New(::google::protobuf::Arena* arena) const {
  NodeInvalidation* n = new NodeInvalidation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInvalidation::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.NodeInvalidation)
  type_ = 0;
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NodeInvalidation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.NodeInvalidation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .underworlds.NodeInvalidation.NodeInvalidationType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::underworlds::NodeInvalidation_NodeInvalidationType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.NodeInvalidation.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.NodeInvalidation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.NodeInvalidation)
  return false;
#undef DO_
}

void NodeInvalidation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.NodeInvalidation)
  // optional .underworlds.NodeInvalidation.NodeInvalidationType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.NodeInvalidation.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.NodeInvalidation)
}

::google::protobuf::uint8* NodeInvalidation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.NodeInvalidation)
  // optional .underworlds.NodeInvalidation.NodeInvalidationType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.NodeInvalidation.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.NodeInvalidation)
  return target;
}

int NodeInvalidation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.NodeInvalidation)
  int total_size = 0;

  // optional .underworlds.NodeInvalidation.NodeInvalidationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInvalidation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.NodeInvalidation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeInvalidation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInvalidation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.NodeInvalidation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.NodeInvalidation)
    MergeFrom(*source);
  }
}

void NodeInvalidation::MergeFrom(const NodeInvalidation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.NodeInvalidation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void NodeInvalidation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.NodeInvalidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInvalidation::CopyFrom(const NodeInvalidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.NodeInvalidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInvalidation::IsInitialized() const {

  return true;
}

void NodeInvalidation::Swap(NodeInvalidation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInvalidation::InternalSwap(NodeInvalidation* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInvalidation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInvalidation_descriptor_;
  metadata.reflection = NodeInvalidation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInvalidation

// optional .underworlds.NodeInvalidation.NodeInvalidationType type = 1;
void NodeInvalidation::clear_type() {
  type_ = 0;
}
 ::underworlds::NodeInvalidation_NodeInvalidationType NodeInvalidation::type() const {
  // @@protoc_insertion_point(field_get:underworlds.NodeInvalidation.type)
  return static_cast< ::underworlds::NodeInvalidation_NodeInvalidationType >(type_);
}
 void NodeInvalidation::set_type(::underworlds::NodeInvalidation_NodeInvalidationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:underworlds.NodeInvalidation.type)
}

// optional string id = 2;
void NodeInvalidation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NodeInvalidation::id() const {
  // @@protoc_insertion_point(field_get:underworlds.NodeInvalidation.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeInvalidation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.NodeInvalidation.id)
}
 void NodeInvalidation::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.NodeInvalidation.id)
}
 void NodeInvalidation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.NodeInvalidation.id)
}
 ::std::string* NodeInvalidation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.NodeInvalidation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeInvalidation::release_id() {
  // @@protoc_insertion_point(field_release:underworlds.NodeInvalidation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeInvalidation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:underworlds.NodeInvalidation.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Situation_SituationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Situation_SituationType_descriptor_;
}
bool Situation_SituationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Situation_SituationType Situation::GENERIC;
const Situation_SituationType Situation::MOTION;
const Situation_SituationType Situation::EVT_MODELLOAD;
const Situation_SituationType Situation::SituationType_MIN;
const Situation_SituationType Situation::SituationType_MAX;
const int Situation::SituationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Situation::kIdFieldNumber;
const int Situation::kTypeFieldNumber;
const int Situation::kDescriptionFieldNumber;
const int Situation::kStartFieldNumber;
const int Situation::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Situation::Situation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Situation)
}

void Situation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  start_ = const_cast< ::underworlds::Time*>(&::underworlds::Time::default_instance());
  end_ = const_cast< ::underworlds::Time*>(&::underworlds::Time::default_instance());
}

Situation::Situation(const Situation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Situation)
}

void Situation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = NULL;
  end_ = NULL;
}

Situation::~Situation() {
  // @@protoc_insertion_point(destructor:underworlds.Situation)
  SharedDtor();
}

void Situation::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void Situation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Situation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Situation_descriptor_;
}

const Situation& Situation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Situation* Situation::default_instance_ = NULL;

Situation* Situation::New(::google::protobuf::Arena* arena) const {
  Situation* n = new Situation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Situation::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Situation)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}

bool Situation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Situation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Situation.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .underworlds.Situation.SituationType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::underworlds::Situation_SituationType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Situation.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // optional .underworlds.Time start = 4;
      case 4: {
        if (tag == 34) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // optional .underworlds.Time end = 5;
      case 5: {
        if (tag == 42) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Situation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Situation)
  return false;
#undef DO_
}

void Situation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Situation)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Situation.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .underworlds.Situation.SituationType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Situation.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional .underworlds.Time start = 4;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_, output);
  }

  // optional .underworlds.Time end = 5;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->end_, output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Situation)
}

::google::protobuf::uint8* Situation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Situation)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Situation.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .underworlds.Situation.SituationType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Situation.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional .underworlds.Time start = 4;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->start_, target);
  }

  // optional .underworlds.Time end = 5;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->end_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Situation)
  return target;
}

int Situation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Situation)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .underworlds.Situation.SituationType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional .underworlds.Time start = 4;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  // optional .underworlds.Time end = 5;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Situation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Situation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Situation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Situation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Situation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Situation)
    MergeFrom(*source);
  }
}

void Situation::MergeFrom(const Situation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Situation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_start()) {
    mutable_start()->::underworlds::Time::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::underworlds::Time::MergeFrom(from.end());
  }
}

void Situation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Situation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Situation::CopyFrom(const Situation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Situation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Situation::IsInitialized() const {

  return true;
}

void Situation::Swap(Situation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Situation::InternalSwap(Situation* other) {
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  description_.Swap(&other->description_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Situation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Situation_descriptor_;
  metadata.reflection = Situation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Situation

// optional string id = 1;
void Situation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Situation::id() const {
  // @@protoc_insertion_point(field_get:underworlds.Situation.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Situation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Situation.id)
}
 void Situation::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Situation.id)
}
 void Situation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Situation.id)
}
 ::std::string* Situation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Situation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Situation::release_id() {
  // @@protoc_insertion_point(field_release:underworlds.Situation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Situation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Situation.id)
}

// optional .underworlds.Situation.SituationType type = 2;
void Situation::clear_type() {
  type_ = 0;
}
 ::underworlds::Situation_SituationType Situation::type() const {
  // @@protoc_insertion_point(field_get:underworlds.Situation.type)
  return static_cast< ::underworlds::Situation_SituationType >(type_);
}
 void Situation::set_type(::underworlds::Situation_SituationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:underworlds.Situation.type)
}

// optional string description = 3;
void Situation::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Situation::description() const {
  // @@protoc_insertion_point(field_get:underworlds.Situation.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Situation::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Situation.description)
}
 void Situation::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Situation.description)
}
 void Situation::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Situation.description)
}
 ::std::string* Situation::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Situation.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Situation::release_description() {
  // @@protoc_insertion_point(field_release:underworlds.Situation.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Situation::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Situation.description)
}

// optional .underworlds.Time start = 4;
bool Situation::has_start() const {
  return !_is_default_instance_ && start_ != NULL;
}
void Situation::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
const ::underworlds::Time& Situation::start() const {
  // @@protoc_insertion_point(field_get:underworlds.Situation.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
::underworlds::Time* Situation::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::underworlds::Time;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.Situation.start)
  return start_;
}
::underworlds::Time* Situation::release_start() {
  // @@protoc_insertion_point(field_release:underworlds.Situation.start)
  
  ::underworlds::Time* temp = start_;
  start_ = NULL;
  return temp;
}
void Situation::set_allocated_start(::underworlds::Time* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.Situation.start)
}

// optional .underworlds.Time end = 5;
bool Situation::has_end() const {
  return !_is_default_instance_ && end_ != NULL;
}
void Situation::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
const ::underworlds::Time& Situation::end() const {
  // @@protoc_insertion_point(field_get:underworlds.Situation.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
::underworlds::Time* Situation::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::underworlds::Time;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.Situation.end)
  return end_;
}
::underworlds::Time* Situation::release_end() {
  // @@protoc_insertion_point(field_release:underworlds.Situation.end)
  
  ::underworlds::Time* temp = end_;
  end_ = NULL;
  return temp;
}
void Situation::set_allocated_end(::underworlds::Time* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.Situation.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SituationInContext::kContextFieldNumber;
const int SituationInContext::kSituationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SituationInContext::SituationInContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.SituationInContext)
}

void SituationInContext::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  context_ = const_cast< ::underworlds::Context*>(&::underworlds::Context::default_instance());
  situation_ = const_cast< ::underworlds::Situation*>(&::underworlds::Situation::default_instance());
}

SituationInContext::SituationInContext(const SituationInContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.SituationInContext)
}

void SituationInContext::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  context_ = NULL;
  situation_ = NULL;
}

SituationInContext::~SituationInContext() {
  // @@protoc_insertion_point(destructor:underworlds.SituationInContext)
  SharedDtor();
}

void SituationInContext::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
    delete situation_;
  }
}

void SituationInContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SituationInContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SituationInContext_descriptor_;
}

const SituationInContext& SituationInContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

SituationInContext* SituationInContext::default_instance_ = NULL;

SituationInContext* SituationInContext::New(::google::protobuf::Arena* arena) const {
  SituationInContext* n = new SituationInContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SituationInContext::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.SituationInContext)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  if (GetArenaNoVirtual() == NULL && situation_ != NULL) delete situation_;
  situation_ = NULL;
}

bool SituationInContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.SituationInContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .underworlds.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_situation;
        break;
      }

      // optional .underworlds.Situation situation = 2;
      case 2: {
        if (tag == 18) {
         parse_situation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_situation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.SituationInContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.SituationInContext)
  return false;
#undef DO_
}

void SituationInContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.SituationInContext)
  // optional .underworlds.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional .underworlds.Situation situation = 2;
  if (this->has_situation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->situation_, output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.SituationInContext)
}

::google::protobuf::uint8* SituationInContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.SituationInContext)
  // optional .underworlds.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->context_, target);
  }

  // optional .underworlds.Situation situation = 2;
  if (this->has_situation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->situation_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.SituationInContext)
  return target;
}

int SituationInContext::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.SituationInContext)
  int total_size = 0;

  // optional .underworlds.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional .underworlds.Situation situation = 2;
  if (this->has_situation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->situation_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SituationInContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.SituationInContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SituationInContext* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SituationInContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.SituationInContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.SituationInContext)
    MergeFrom(*source);
  }
}

void SituationInContext::MergeFrom(const SituationInContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.SituationInContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_context()) {
    mutable_context()->::underworlds::Context::MergeFrom(from.context());
  }
  if (from.has_situation()) {
    mutable_situation()->::underworlds::Situation::MergeFrom(from.situation());
  }
}

void SituationInContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.SituationInContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SituationInContext::CopyFrom(const SituationInContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.SituationInContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SituationInContext::IsInitialized() const {

  return true;
}

void SituationInContext::Swap(SituationInContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SituationInContext::InternalSwap(SituationInContext* other) {
  std::swap(context_, other->context_);
  std::swap(situation_, other->situation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SituationInContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SituationInContext_descriptor_;
  metadata.reflection = SituationInContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SituationInContext

// optional .underworlds.Context context = 1;
bool SituationInContext::has_context() const {
  return !_is_default_instance_ && context_ != NULL;
}
void SituationInContext::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::underworlds::Context& SituationInContext::context() const {
  // @@protoc_insertion_point(field_get:underworlds.SituationInContext.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::underworlds::Context* SituationInContext::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::underworlds::Context;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.SituationInContext.context)
  return context_;
}
::underworlds::Context* SituationInContext::release_context() {
  // @@protoc_insertion_point(field_release:underworlds.SituationInContext.context)
  
  ::underworlds::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void SituationInContext::set_allocated_context(::underworlds::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.SituationInContext.context)
}

// optional .underworlds.Situation situation = 2;
bool SituationInContext::has_situation() const {
  return !_is_default_instance_ && situation_ != NULL;
}
void SituationInContext::clear_situation() {
  if (GetArenaNoVirtual() == NULL && situation_ != NULL) delete situation_;
  situation_ = NULL;
}
const ::underworlds::Situation& SituationInContext::situation() const {
  // @@protoc_insertion_point(field_get:underworlds.SituationInContext.situation)
  return situation_ != NULL ? *situation_ : *default_instance_->situation_;
}
::underworlds::Situation* SituationInContext::mutable_situation() {
  
  if (situation_ == NULL) {
    situation_ = new ::underworlds::Situation;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.SituationInContext.situation)
  return situation_;
}
::underworlds::Situation* SituationInContext::release_situation() {
  // @@protoc_insertion_point(field_release:underworlds.SituationInContext.situation)
  
  ::underworlds::Situation* temp = situation_;
  situation_ = NULL;
  return temp;
}
void SituationInContext::set_allocated_situation(::underworlds::Situation* situation) {
  delete situation_;
  situation_ = situation;
  if (situation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.SituationInContext.situation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TimelineInvalidation_TimelineInvalidationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimelineInvalidation_TimelineInvalidationType_descriptor_;
}
bool TimelineInvalidation_TimelineInvalidationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimelineInvalidation_TimelineInvalidationType TimelineInvalidation::EVENT;
const TimelineInvalidation_TimelineInvalidationType TimelineInvalidation::START;
const TimelineInvalidation_TimelineInvalidationType TimelineInvalidation::END;
const TimelineInvalidation_TimelineInvalidationType TimelineInvalidation::TimelineInvalidationType_MIN;
const TimelineInvalidation_TimelineInvalidationType TimelineInvalidation::TimelineInvalidationType_MAX;
const int TimelineInvalidation::TimelineInvalidationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimelineInvalidation::kTypeFieldNumber;
const int TimelineInvalidation::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimelineInvalidation::TimelineInvalidation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.TimelineInvalidation)
}

void TimelineInvalidation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimelineInvalidation::TimelineInvalidation(const TimelineInvalidation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.TimelineInvalidation)
}

void TimelineInvalidation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TimelineInvalidation::~TimelineInvalidation() {
  // @@protoc_insertion_point(destructor:underworlds.TimelineInvalidation)
  SharedDtor();
}

void TimelineInvalidation::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TimelineInvalidation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimelineInvalidation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimelineInvalidation_descriptor_;
}

const TimelineInvalidation& TimelineInvalidation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

TimelineInvalidation* TimelineInvalidation::default_instance_ = NULL;

TimelineInvalidation* TimelineInvalidation::New(::google::protobuf::Arena* arena) const {
  TimelineInvalidation* n = new TimelineInvalidation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimelineInvalidation::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.TimelineInvalidation)
  type_ = 0;
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TimelineInvalidation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.TimelineInvalidation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .underworlds.TimelineInvalidation.TimelineInvalidationType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::underworlds::TimelineInvalidation_TimelineInvalidationType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.TimelineInvalidation.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.TimelineInvalidation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.TimelineInvalidation)
  return false;
#undef DO_
}

void TimelineInvalidation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.TimelineInvalidation)
  // optional .underworlds.TimelineInvalidation.TimelineInvalidationType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.TimelineInvalidation.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.TimelineInvalidation)
}

::google::protobuf::uint8* TimelineInvalidation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.TimelineInvalidation)
  // optional .underworlds.TimelineInvalidation.TimelineInvalidationType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.TimelineInvalidation.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.TimelineInvalidation)
  return target;
}

int TimelineInvalidation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.TimelineInvalidation)
  int total_size = 0;

  // optional .underworlds.TimelineInvalidation.TimelineInvalidationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimelineInvalidation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.TimelineInvalidation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimelineInvalidation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimelineInvalidation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.TimelineInvalidation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.TimelineInvalidation)
    MergeFrom(*source);
  }
}

void TimelineInvalidation::MergeFrom(const TimelineInvalidation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.TimelineInvalidation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void TimelineInvalidation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.TimelineInvalidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimelineInvalidation::CopyFrom(const TimelineInvalidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.TimelineInvalidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelineInvalidation::IsInitialized() const {

  return true;
}

void TimelineInvalidation::Swap(TimelineInvalidation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimelineInvalidation::InternalSwap(TimelineInvalidation* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimelineInvalidation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimelineInvalidation_descriptor_;
  metadata.reflection = TimelineInvalidation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimelineInvalidation

// optional .underworlds.TimelineInvalidation.TimelineInvalidationType type = 1;
void TimelineInvalidation::clear_type() {
  type_ = 0;
}
 ::underworlds::TimelineInvalidation_TimelineInvalidationType TimelineInvalidation::type() const {
  // @@protoc_insertion_point(field_get:underworlds.TimelineInvalidation.type)
  return static_cast< ::underworlds::TimelineInvalidation_TimelineInvalidationType >(type_);
}
 void TimelineInvalidation::set_type(::underworlds::TimelineInvalidation_TimelineInvalidationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:underworlds.TimelineInvalidation.type)
}

// optional string id = 2;
void TimelineInvalidation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TimelineInvalidation::id() const {
  // @@protoc_insertion_point(field_get:underworlds.TimelineInvalidation.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TimelineInvalidation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.TimelineInvalidation.id)
}
 void TimelineInvalidation::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.TimelineInvalidation.id)
}
 void TimelineInvalidation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.TimelineInvalidation.id)
}
 ::std::string* TimelineInvalidation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.TimelineInvalidation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TimelineInvalidation::release_id() {
  // @@protoc_insertion_point(field_release:underworlds.TimelineInvalidation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TimelineInvalidation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:underworlds.TimelineInvalidation.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh::kIdFieldNumber;
const int Mesh::kVerticesFieldNumber;
const int Mesh::kFacesFieldNumber;
const int Mesh::kNormalsFieldNumber;
const int Mesh::kColorsFieldNumber;
const int Mesh::kDiffuseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh::Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.Mesh)
}

void Mesh::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  diffuse_ = const_cast< ::underworlds::Color*>(&::underworlds::Color::default_instance());
}

Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.Mesh)
}

void Mesh::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diffuse_ = NULL;
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:underworlds.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete diffuse_;
  }
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_descriptor_;
}

const Mesh& Mesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

Mesh* Mesh::default_instance_ = NULL;

Mesh* Mesh::New(::google::protobuf::Arena* arena) const {
  Mesh* n = new Mesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.Mesh)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) delete diffuse_;
  diffuse_ = NULL;
  vertices_.Clear();
  faces_.Clear();
  normals_.Clear();
  colors_.Clear();
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "underworlds.Mesh.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // repeated .underworlds.Pointf vertices = 2;
      case 2: {
        if (tag == 18) {
         parse_vertices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_vertices;
        if (input->ExpectTag(26)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .underworlds.Point faces = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_faces;
        if (input->ExpectTag(34)) goto parse_loop_normals;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .underworlds.Pointf normals = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_normals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_normals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_normals;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_colors;
        break;
      }

      // repeated uint32 colors = 5;
      case 5: {
        if (tag == 42) {
         parse_colors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_colors())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_colors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_diffuse;
        break;
      }

      // optional .underworlds.Color diffuse = 6;
      case 6: {
        if (tag == 50) {
         parse_diffuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.Mesh)
  return false;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.Mesh)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Mesh.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .underworlds.Pointf vertices = 2;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertices(i), output);
  }

  // repeated .underworlds.Point faces = 3;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->faces(i), output);
  }

  // repeated .underworlds.Pointf normals = 4;
  for (unsigned int i = 0, n = this->normals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->normals(i), output);
  }

  // repeated uint32 colors = 5;
  if (this->colors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_colors_cached_byte_size_);
  }
  for (int i = 0; i < this->colors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->colors(i), output);
  }

  // optional .underworlds.Color diffuse = 6;
  if (this->has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->diffuse_, output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.Mesh)
}

::google::protobuf::uint8* Mesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.Mesh)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "underworlds.Mesh.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .underworlds.Pointf vertices = 2;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertices(i), target);
  }

  // repeated .underworlds.Point faces = 3;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->faces(i), target);
  }

  // repeated .underworlds.Pointf normals = 4;
  for (unsigned int i = 0, n = this->normals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->normals(i), target);
  }

  // repeated uint32 colors = 5;
  if (this->colors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _colors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->colors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->colors(i), target);
  }

  // optional .underworlds.Color diffuse = 6;
  if (this->has_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->diffuse_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.Mesh)
  return target;
}

int Mesh::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.Mesh)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .underworlds.Color diffuse = 6;
  if (this->has_diffuse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->diffuse_);
  }

  // repeated .underworlds.Pointf vertices = 2;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated .underworlds.Point faces = 3;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  // repeated .underworlds.Pointf normals = 4;
  total_size += 1 * this->normals_size();
  for (int i = 0; i < this->normals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normals(i));
  }

  // repeated uint32 colors = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->colors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->colors(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _colors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.Mesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mesh* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.Mesh)
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.Mesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vertices_.MergeFrom(from.vertices_);
  faces_.MergeFrom(from.faces_);
  normals_.MergeFrom(from.normals_);
  colors_.MergeFrom(from.colors_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_diffuse()) {
    mutable_diffuse()->::underworlds::Color::MergeFrom(from.diffuse());
  }
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {

  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh::InternalSwap(Mesh* other) {
  id_.Swap(&other->id_);
  vertices_.UnsafeArenaSwap(&other->vertices_);
  faces_.UnsafeArenaSwap(&other->faces_);
  normals_.UnsafeArenaSwap(&other->normals_);
  colors_.UnsafeArenaSwap(&other->colors_);
  std::swap(diffuse_, other->diffuse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_descriptor_;
  metadata.reflection = Mesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh

// optional string id = 1;
void Mesh::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mesh::id() const {
  // @@protoc_insertion_point(field_get:underworlds.Mesh.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:underworlds.Mesh.id)
}
 void Mesh::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:underworlds.Mesh.id)
}
 void Mesh::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:underworlds.Mesh.id)
}
 ::std::string* Mesh::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:underworlds.Mesh.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mesh::release_id() {
  // @@protoc_insertion_point(field_release:underworlds.Mesh.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mesh::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:underworlds.Mesh.id)
}

// repeated .underworlds.Pointf vertices = 2;
int Mesh::vertices_size() const {
  return vertices_.size();
}
void Mesh::clear_vertices() {
  vertices_.Clear();
}
const ::underworlds::Pointf& Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Mesh.vertices)
  return vertices_.Get(index);
}
::underworlds::Pointf* Mesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Mesh.vertices)
  return vertices_.Mutable(index);
}
::underworlds::Pointf* Mesh::add_vertices() {
  // @@protoc_insertion_point(field_add:underworlds.Mesh.vertices)
  return vertices_.Add();
}
::google::protobuf::RepeatedPtrField< ::underworlds::Pointf >*
Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Mesh.vertices)
  return &vertices_;
}
const ::google::protobuf::RepeatedPtrField< ::underworlds::Pointf >&
Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:underworlds.Mesh.vertices)
  return vertices_;
}

// repeated .underworlds.Point faces = 3;
int Mesh::faces_size() const {
  return faces_.size();
}
void Mesh::clear_faces() {
  faces_.Clear();
}
const ::underworlds::Point& Mesh::faces(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Mesh.faces)
  return faces_.Get(index);
}
::underworlds::Point* Mesh::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Mesh.faces)
  return faces_.Mutable(index);
}
::underworlds::Point* Mesh::add_faces() {
  // @@protoc_insertion_point(field_add:underworlds.Mesh.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::underworlds::Point >*
Mesh::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Mesh.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::underworlds::Point >&
Mesh::faces() const {
  // @@protoc_insertion_point(field_list:underworlds.Mesh.faces)
  return faces_;
}

// repeated .underworlds.Pointf normals = 4;
int Mesh::normals_size() const {
  return normals_.size();
}
void Mesh::clear_normals() {
  normals_.Clear();
}
const ::underworlds::Pointf& Mesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Mesh.normals)
  return normals_.Get(index);
}
::underworlds::Pointf* Mesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:underworlds.Mesh.normals)
  return normals_.Mutable(index);
}
::underworlds::Pointf* Mesh::add_normals() {
  // @@protoc_insertion_point(field_add:underworlds.Mesh.normals)
  return normals_.Add();
}
::google::protobuf::RepeatedPtrField< ::underworlds::Pointf >*
Mesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Mesh.normals)
  return &normals_;
}
const ::google::protobuf::RepeatedPtrField< ::underworlds::Pointf >&
Mesh::normals() const {
  // @@protoc_insertion_point(field_list:underworlds.Mesh.normals)
  return normals_;
}

// repeated uint32 colors = 5;
int Mesh::colors_size() const {
  return colors_.size();
}
void Mesh::clear_colors() {
  colors_.Clear();
}
 ::google::protobuf::uint32 Mesh::colors(int index) const {
  // @@protoc_insertion_point(field_get:underworlds.Mesh.colors)
  return colors_.Get(index);
}
 void Mesh::set_colors(int index, ::google::protobuf::uint32 value) {
  colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:underworlds.Mesh.colors)
}
 void Mesh::add_colors(::google::protobuf::uint32 value) {
  colors_.Add(value);
  // @@protoc_insertion_point(field_add:underworlds.Mesh.colors)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Mesh::colors() const {
  // @@protoc_insertion_point(field_list:underworlds.Mesh.colors)
  return colors_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Mesh::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:underworlds.Mesh.colors)
  return &colors_;
}

// optional .underworlds.Color diffuse = 6;
bool Mesh::has_diffuse() const {
  return !_is_default_instance_ && diffuse_ != NULL;
}
void Mesh::clear_diffuse() {
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) delete diffuse_;
  diffuse_ = NULL;
}
const ::underworlds::Color& Mesh::diffuse() const {
  // @@protoc_insertion_point(field_get:underworlds.Mesh.diffuse)
  return diffuse_ != NULL ? *diffuse_ : *default_instance_->diffuse_;
}
::underworlds::Color* Mesh::mutable_diffuse() {
  
  if (diffuse_ == NULL) {
    diffuse_ = new ::underworlds::Color;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.Mesh.diffuse)
  return diffuse_;
}
::underworlds::Color* Mesh::release_diffuse() {
  // @@protoc_insertion_point(field_release:underworlds.Mesh.diffuse)
  
  ::underworlds::Color* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
void Mesh::set_allocated_diffuse(::underworlds::Color* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.Mesh.diffuse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeshInContext::kClientFieldNumber;
const int MeshInContext::kMeshFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeshInContext::MeshInContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:underworlds.MeshInContext)
}

void MeshInContext::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  client_ = const_cast< ::underworlds::Client*>(&::underworlds::Client::default_instance());
  mesh_ = const_cast< ::underworlds::Mesh*>(&::underworlds::Mesh::default_instance());
}

MeshInContext::MeshInContext(const MeshInContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:underworlds.MeshInContext)
}

void MeshInContext::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  client_ = NULL;
  mesh_ = NULL;
}

MeshInContext::~MeshInContext() {
  // @@protoc_insertion_point(destructor:underworlds.MeshInContext)
  SharedDtor();
}

void MeshInContext::SharedDtor() {
  if (this != default_instance_) {
    delete client_;
    delete mesh_;
  }
}

void MeshInContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeshInContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeshInContext_descriptor_;
}

const MeshInContext& MeshInContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_underworlds_2eproto();
  return *default_instance_;
}

MeshInContext* MeshInContext::default_instance_ = NULL;

MeshInContext* MeshInContext::New(::google::protobuf::Arena* arena) const {
  MeshInContext* n = new MeshInContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeshInContext::Clear() {
// @@protoc_insertion_point(message_clear_start:underworlds.MeshInContext)
  if (GetArenaNoVirtual() == NULL && client_ != NULL) delete client_;
  client_ = NULL;
  if (GetArenaNoVirtual() == NULL && mesh_ != NULL) delete mesh_;
  mesh_ = NULL;
}

bool MeshInContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:underworlds.MeshInContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .underworlds.Client client = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mesh;
        break;
      }

      // optional .underworlds.Mesh mesh = 2;
      case 2: {
        if (tag == 18) {
         parse_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:underworlds.MeshInContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:underworlds.MeshInContext)
  return false;
#undef DO_
}

void MeshInContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:underworlds.MeshInContext)
  // optional .underworlds.Client client = 1;
  if (this->has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->client_, output);
  }

  // optional .underworlds.Mesh mesh = 2;
  if (this->has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mesh_, output);
  }

  // @@protoc_insertion_point(serialize_end:underworlds.MeshInContext)
}

::google::protobuf::uint8* MeshInContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:underworlds.MeshInContext)
  // optional .underworlds.Client client = 1;
  if (this->has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->client_, target);
  }

  // optional .underworlds.Mesh mesh = 2;
  if (this->has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->mesh_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:underworlds.MeshInContext)
  return target;
}

int MeshInContext::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:underworlds.MeshInContext)
  int total_size = 0;

  // optional .underworlds.Client client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_);
  }

  // optional .underworlds.Mesh mesh = 2;
  if (this->has_mesh()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mesh_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeshInContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:underworlds.MeshInContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MeshInContext* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MeshInContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:underworlds.MeshInContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:underworlds.MeshInContext)
    MergeFrom(*source);
  }
}

void MeshInContext::MergeFrom(const MeshInContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:underworlds.MeshInContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_client()) {
    mutable_client()->::underworlds::Client::MergeFrom(from.client());
  }
  if (from.has_mesh()) {
    mutable_mesh()->::underworlds::Mesh::MergeFrom(from.mesh());
  }
}

void MeshInContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:underworlds.MeshInContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshInContext::CopyFrom(const MeshInContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:underworlds.MeshInContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshInContext::IsInitialized() const {

  return true;
}

void MeshInContext::Swap(MeshInContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeshInContext::InternalSwap(MeshInContext* other) {
  std::swap(client_, other->client_);
  std::swap(mesh_, other->mesh_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeshInContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeshInContext_descriptor_;
  metadata.reflection = MeshInContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeshInContext

// optional .underworlds.Client client = 1;
bool MeshInContext::has_client() const {
  return !_is_default_instance_ && client_ != NULL;
}
void MeshInContext::clear_client() {
  if (GetArenaNoVirtual() == NULL && client_ != NULL) delete client_;
  client_ = NULL;
}
const ::underworlds::Client& MeshInContext::client() const {
  // @@protoc_insertion_point(field_get:underworlds.MeshInContext.client)
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
::underworlds::Client* MeshInContext::mutable_client() {
  
  if (client_ == NULL) {
    client_ = new ::underworlds::Client;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.MeshInContext.client)
  return client_;
}
::underworlds::Client* MeshInContext::release_client() {
  // @@protoc_insertion_point(field_release:underworlds.MeshInContext.client)
  
  ::underworlds::Client* temp = client_;
  client_ = NULL;
  return temp;
}
void MeshInContext::set_allocated_client(::underworlds::Client* client) {
  delete client_;
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.MeshInContext.client)
}

// optional .underworlds.Mesh mesh = 2;
bool MeshInContext::has_mesh() const {
  return !_is_default_instance_ && mesh_ != NULL;
}
void MeshInContext::clear_mesh() {
  if (GetArenaNoVirtual() == NULL && mesh_ != NULL) delete mesh_;
  mesh_ = NULL;
}
const ::underworlds::Mesh& MeshInContext::mesh() const {
  // @@protoc_insertion_point(field_get:underworlds.MeshInContext.mesh)
  return mesh_ != NULL ? *mesh_ : *default_instance_->mesh_;
}
::underworlds::Mesh* MeshInContext::mutable_mesh() {
  
  if (mesh_ == NULL) {
    mesh_ = new ::underworlds::Mesh;
  }
  // @@protoc_insertion_point(field_mutable:underworlds.MeshInContext.mesh)
  return mesh_;
}
::underworlds::Mesh* MeshInContext::release_mesh() {
  // @@protoc_insertion_point(field_release:underworlds.MeshInContext.mesh)
  
  ::underworlds::Mesh* temp = mesh_;
  mesh_ = NULL;
  return temp;
}
void MeshInContext::set_allocated_mesh(::underworlds::Mesh* mesh) {
  delete mesh_;
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:underworlds.MeshInContext.mesh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace underworlds

// @@protoc_insertion_point(global_scope)
