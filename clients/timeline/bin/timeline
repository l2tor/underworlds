#! /usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import pygtk

pygtk.require('2.0')

import gtk
from gtk import gdk
import gtk.glade
import gobject
import cairo
import math
import time
import datetime
from collections import OrderedDict

import underworlds

class WindowsArea(gtk.DrawingArea):

    def __init__(self):
        gtk.DrawingArea.__init__(self)
        self.connect("expose_event", self.expose)
        self.connect("button_press_event", self.onpress)
        self.connect("scroll_event", self.onscroll)
        self.connect("button_release_event", self.onrelease)
        self.connect("motion_notify_event", self.onmove)

        self.set_events(gtk.gdk.BUTTON_PRESS_MASK
                        | gtk.gdk.BUTTON_RELEASE_MASK
                        | gtk.gdk.POINTER_MOTION_MASK
                        | gtk.gdk.SCROLL_MASK)

        self.set_size_request(-1, 200)

        self.update()
        gobject.timeout_add(100, self.update)
        self._dragging = False

        self.timelinedrawer = TimelineDrawer()
        self.center_on_time = time.time() * 1000 # time in ms that we center the timeline on
        self.center_on_pos = 50 # abscisse of the time specified above

    def settimeline(self, timeline):

        self.timelinedrawer.settimeline(timeline)

    def onscroll(self, widget, evt):

        self.center_on_time = self.timelinedrawer.get_time(evt.x)
        self.center_on_pos = evt.x

        if evt.direction == gtk.gdk.SCROLL_DOWN:
            self.timelinedrawer.ms_per_pixel *= 1.1
        else:
            self.timelinedrawer.ms_per_pixel *= 0.9

        self.redraw()

    def onpress(self, widget, evt):

        if not self._dragging:
            self.center_on_time = self.timelinedrawer.get_time(evt.x)

        self._dragging = True
        return False

    def onrelease(self, widget, evt):
        if self._dragging:
            self._dragging = False
        return False

    def onmove(self, widget, evt):

        if self._dragging:
            self.center_on_pos = evt.x
            self.redraw()

    def redraw(self):
        if self.window:
            alloc = self.get_allocation()
            rect = gdk.Rectangle(0, 0, alloc.width, alloc.height)
            self.window.invalidate_rect(rect, True)
            self.window.process_updates(True)

    def update(self):
        self.redraw()
        return True

    def expose(self, widget, event):

        self.context = widget.window.cairo_create()


        self.context.select_font_face("Ubuntu", cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
        self.context.set_font_size(13)

        # set a clip region for the expose event
        self.context.rectangle(event.area.x, event.area.y,
                               event.area.width, event.area.height)
        self.context.clip()

        self.draw(self.context,  *self.window.get_size())

        return False

    def draw(self, context, width, height):
        self.timelinedrawer.draw(context, width, height, self.center_on_time, self.center_on_pos)


class TimelineDrawer:

    height = 60
    margins = 10

    def __init__(self, origin = 0):

        self.timeline = None

        self.ms_per_pixel = 200 # timescale, in milliseconds per pixels
        self.time_of_origin = origin # timestamp, in ms, of the origin of the currently drawn timeline

    def settimeline(self, timeline):
        self.timeline = timeline

    def draw_arrow_tip(self, context, width, height):

        mid = height/2

        # Draw the timeline arrow *outside* the clipping zone
        context.move_to(width - 50, mid - TimelineDrawer.height/2)
        context.line_to(width-TimelineDrawer.margins, mid)
        context.line_to(width-50, mid + TimelineDrawer.height/2)
        context.close_path()

        context.set_source_rgba(0.6, 0.6, 0.6, 1.0)
        context.fill_preserve()
        context.set_source_rgba(0, 0, 0, 0)
        context.stroke()


    def draw_timearrow(self, context, width, height):
        mid = height/2

        context.rectangle(TimelineDrawer.margins, 
                          mid - TimelineDrawer.height/2, 
                          width - (50 + TimelineDrawer.margins), 
                          TimelineDrawer.height)

        context.set_source_rgba(0.6, 0.6, 0.6, 1.0)
        context.fill_preserve()
        context.set_source_rgba(0, 0, 0, 0)
        context.stroke()

    def get_time(self, x):
        return (x-TimelineDrawer.margins) * self.ms_per_pixel + self.time_of_origin

    def print_time(self, context, reftime, reftimepos, width):
        """
        Should be called with the cursor in the Cairo context positionned at
        the start of the timeline, on the baseline.

        :param reftime: time, in milliseconds, that correspond to the desired
        *center* of the timeline

        """

        # Intervals, in ms, to display the scale on the timeline.
        # The best fit is automatically selected
        timeintervals = [5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000, 30000, 60000, 300000]

        timespan = width * self.ms_per_pixel

        self.time_of_origin = max(0, reftime - (reftimepos * self.ms_per_pixel))

        # Shifted origin to display 0"0.0 at actual timeline time origin
        corrected_origin = self.time_of_origin - (self.timeline.origin * 1000)

        def get_timeinterval(timespan):
            for dt in timeintervals[::-1]:
                if timespan // (dt * 5):
                    return dt

            return timeintervals[0]

        timeinterval = get_timeinterval(timespan)

        def print_stamp(t, interval):

            x,y = context.get_current_point()
            context.rel_move_to(0, -TimelineDrawer.height/2 * 0.9)
            context.rel_line_to(0, TimelineDrawer.height * 0.9)

            context.move_to(x,y)
            context.rel_move_to(5, 4)

            mytime = {}
            mytime["mn"], remainder = divmod(int(t), 60 * 1000)
            mytime["secs"], mytime["ms"] = divmod(remainder, 1000)

            if mytime["ms"]:
                context.show_text("{mn}'{secs}\"{ms:03}ms".format(**mytime))
            else:
                context.show_text("{mn}'{secs}\"".format(**mytime))
            context.move_to(x,y)
            context.rel_move_to(interval / self.ms_per_pixel, 0)

        context.set_source_rgba(0, 0, 0, 0.8)
        offset = timeinterval - (corrected_origin % timeinterval)
        t = corrected_origin + offset
        context.rel_move_to(offset / self.ms_per_pixel,0)

        while t < (corrected_origin + timespan):
            print_stamp(t, timeinterval)
            t += timeinterval

        context.stroke()

    def draw_interval(self, context, itrvl, colour = (1, 0.7, 0.2, 1), level = 0):

        interval_height = 20

        context.rel_move_to(0, TimelineDrawer.height/2 + 10 + level * (interval_height + 10))

        startoffset = (itrvl.starttime * 1000 - self.time_of_origin) / self.ms_per_pixel

        endtime = itrvl.endtime or time.time() # take care of unfinished situations
        endoffset = (endtime * 1000 - self.time_of_origin) / self.ms_per_pixel

        x,y = context.get_current_point()

        context.new_path()
        context.set_source_rgba(*colour)
        context.rectangle(x + startoffset, y,
                          endoffset - startoffset,
                          interval_height)
        context.fill_preserve()
        context.new_path()
        context.set_source_rgba(0, 0, 0, 0.8)
        context.move_to(x + startoffset, y + interval_height - 4)
        context.show_text(str(itrvl))
        context.stroke()

    def draw_event(self, context, evt, colour = (1, 0.7, 0.2, 1)):

        context.rel_move_to(0, - TimelineDrawer.height/2)
        offset = (evt.starttime * 1000 - self.time_of_origin) / self.ms_per_pixel
        x,y = context.get_current_point()

        context.new_path()
        context.set_source_rgba(*colour)
        context.arc(x + offset, y, 5, 0, 2.0 * math.pi)
        context.fill_preserve()
        context.set_source_rgba(0, 0, 0, 0.8)
        context.rotate(-1)
        context.rel_move_to(10,0)
        context.show_text(str(evt))
        context.stroke()
 
    def draw_situations(self, context, width, height):
        mid = height/2

        lvl = 0
        for s in self.timeline.situations:
            context.identity_matrix()
            context.move_to(TimelineDrawer.margins, mid)
            if s.isevent():
                self.draw_event(context, s)
            else:

                self.draw_interval(context, s, level = lvl)
                lvl += 1

    def draw_now(self, context, height, colour = (1, 0.1, 0.1, 1)):
        """ Draws a red bar at current time
        """

        mid = height/2
        offset = (time.time() * 1000 - self.time_of_origin) / self.ms_per_pixel
        context.new_path()
        context.move_to(TimelineDrawer.margins + offset, mid - TimelineDrawer.height/2 - 5)

        context.set_source_rgba(*colour)
        context.rel_line_to(0, TimelineDrawer.height + 10)
        context.stroke()
 

    def draw(self, context, width, height, center_on_time, center_on_pos):
        """

        :param center_on: time in ms the timeline will be centered on. If none, show 'now'
        """
        if not self.timeline:
            context.move_to(10,10)
            context.show_text("Click on \"System>Select world\" to connect to a world.")
            return


        context.move_to(10,10)
        context.show_text("World: %s" % self.timeline._world.name)
        context.move_to(10,30)
        context.show_text("Scale: %d ms/pixel" % self.ms_per_pixel)

        self.draw_arrow_tip(context, width, height)
        # set the clip region, with margins
        context.save()

        context.rectangle(TimelineDrawer.margins, 
                          0,
                          width - TimelineDrawer.margins - 50,
                          height)
        context.clip()

        self.draw_timearrow(context, width, height)

        mid = height/2
        netto_width = width - (TimelineDrawer.margins * 2)
        context.move_to(TimelineDrawer.margins, mid)
        self.print_time(context, 
                center_on_time, 
                center_on_pos - TimelineDrawer.margins, 
                netto_width)


        self.draw_now(context, height)
        self.draw_situations(context, width, height)

        # restore full window
        context.restore()

class TimelineApp:
    def __init__(self, ctx):

        self.ctx = ctx

        self.gladefile = "res/timeline.glade"
        self.builder = gtk.Builder()
        self.builder.add_from_file(self.gladefile)
        self.builder.connect_signals(self)

        self.mainwindow = self.builder.get_object("timeline_main")
        self.world_dlg = self.builder.get_object("world_dialog")


        self.windowsarea = WindowsArea()
        mainvbox = self.builder.get_object("mainvbox")
        mainvbox.pack_start(self.windowsarea)
        self.mainwindow.show_all()

        self.refresh()

    def delete(self, source=None, event=None):
        gtk.main_quit()

    def refresh(self, source=None, event=None):
        self.windowsarea.redraw()

    def select_world(self, source=None, event=None):

        res = self.world_dlg.run()
        world = self.builder.get_object("world").get_text()
        print("Connecting to world %s"%world)
        self.windowsarea.settimeline(self.ctx.worlds[world].timeline)

        self.world_dlg.hide()
        self.refresh()

       
if __name__ == '__main__':

    ###########################################
    #from underworlds.types import Event, Timeline, StaticSituation
    #import time
    #timeline = Timeline()
    #timeline.event(Event())
    #time.sleep(0.1)
    #timeline.event(Event())
    #s = StaticSituation()
    #timeline.start(s)
    #time.sleep(0.1)
    #s2 = StaticSituation()
    #timeline.start(s2)
    #timeline.event(Event())
    #time.sleep(1)
    #timeline.event(Event())
    #timeline.end(s)
    #timeline.end(s2)
    ############################################

    with underworlds.Context("Timeline viewer") as ctx:


        app = TimelineApp(ctx)
        gtk.main()
